<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>rbac1 - 標籤 - KaiChu</title><link>https://kaichu.io/zh-tw/tags/rbac1/</link><description>rbac1 - 標籤 - KaiChu</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 04 Feb 2021 10:52:45 +0800</lastBuildDate><atom:link href="https://kaichu.io/zh-tw/tags/rbac1/" rel="self" type="application/rss+xml"/><item><title>Postgres Transpose Rows to Columns</title><link>https://kaichu.io/zh-tw/posts/postgres-transpose-rows-to-columns/</link><pubDate>Thu, 04 Feb 2021 10:52:45 +0800</pubDate><author>作者</author><guid>https://kaichu.io/zh-tw/posts/postgres-transpose-rows-to-columns/</guid><description>延續上一篇文章 Rbac1 Design，透過 Postgres Transpose Rows to Columns (crosstab) 將行列互換，可以拿到一個基於每一個使用者基於 RBAC resource 對應操作權限</description></item><item><title>Rbac1 Design</title><link>https://kaichu.io/zh-tw/posts/rbac1-design/</link><pubDate>Sun, 24 Jan 2021 13:03:50 +0800</pubDate><author>作者</author><guid>https://kaichu.io/zh-tw/posts/rbac1-design/</guid><description>權限系統在任何應用程式都是基礎且重要的部份，主要是對不同的人訪問資源進行權限的控制，本篇文章並沒有特別的再說明 Role-Based Access Control, 解釋的文章已經太多了，隨便 Google 都是一堆。最期在公司的專案也是有採用 RBAC 來管控系統的權限，一般的 RBAC0 (最基本的 User - Role - Permission) 的模型大至上可以符合需求，不過在權限配直的時候會有一點重工，所以選擇了有角色繼承的 RBAC1 來進行實作</description></item></channel></rss>