<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kaichu.io</title>
  
  <subtitle>coding 人生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kaichu.io/"/>
  <updated>2020-06-20T04:20:43.718Z</updated>
  <id>http://kaichu.io/</id>
  
  <author>
    <name>KAI CHU CHUNG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS ringtone maker from YouTube video</title>
    <link href="http://kaichu.io/2020/06/20/ios-ringtone-maker-from-youtube/"/>
    <id>http://kaichu.io/2020/06/20/ios-ringtone-maker-from-youtube/</id>
    <published>2020-06-20T04:13:48.000Z</published>
    <updated>2020-06-20T04:20:43.718Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近大竹弟打電話問說 iOS 鈴聲在 Garageband 上面製作的檔案怎麼這麼大，其實只有 5 秒的鈴聲</p><p>先來說一下 iPhone 上配置客製的鈴聲有二種方式</p><ul><li>iTunes</li><li>Garageband 上編輯直接輸出至鈴聲</li></ul><p>由於 macOS 10.15 版本就沒有 itunes 可以用，所以基本上網路的教學大也是直接在 Garageband 上直接編輯後直接輸出至 iPhone 的鈴聲</p><p>以前我自己也是換過不少鈴聲，以前是透過 <a href="https://sur.ly/o/audiko.tw/AA000014" target="_blank" rel="noopener">Free Ringtones for Android and iPhone. Free Ringtone Maker - Audiko</a> 選擇喜歡的檔案下載安裝</p><p>雖然現成的工具方便，不過有時候找不到自己喜歡的歌曲，那就土砲一個吧</p><a id="more"></a><h3 id="iOS-ringtone-maker-from-YouTube-video"><a href="#iOS-ringtone-maker-from-YouTube-video" class="headerlink" title="iOS ringtone maker from YouTube video"></a>iOS ringtone maker from YouTube video</h3><p><a href="https://github.com/cage1016/ios-ringtone-maker-yt" target="_blank" rel="noopener">cage1016/ios-ringtone-maker-yt: iOS ringtone maker from Youtube video</a></p><p>基本上的流程</p><ul><li>找到喜歡的 YouTube vide</li><li>找到想要音頻的開始秒數 ex: 00:04:00</li><li>決定鈴聲的秒數 ex: 30</li><li>是否要音頻漸入漸出效果</li><li>直接下 command container 會直接輸出 m4r</li><li>copy 至 iCloud</li><li>在 Garageband 引入 m4r</li><li>輸出至鈴聲</li><li>打完收工</li></ul><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><ol><li>找到一個 YouTube 影片 <a href="https://www.youtube.com/watch?v=Pkh8UtuejGw" target="_blank" rel="noopener">Señorita - YouTube</a></li><li>從 22 秒開始</li><li>共 30 秒</li><li>音頻漸入漸出效果: fadein 3 秒， fadeout 3 秒</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -it -v $(PWD)/output:/app/output -e FADEIN=3 -e FADEOUT=3 -e VID=Pkh8UtuejGw -e SS=00:00:22 -e T=30 cage1016/ios-ringtone-maker-yt:latest</span><br><span class="line">YoutTubeID: Pkh8UtuejGw</span><br><span class="line">StartTime: 00:00:22</span><br><span class="line">Duration: 30</span><br><span class="line">FadeIn: 3</span><br><span class="line">FadeOut: 3</span><br><span class="line"></span><br><span class="line"> Site:      YouTube youtube.com</span><br><span class="line"> Title:     Shawn Mendes, Camila Cabello - Señorita</span><br><span class="line"> Type:      video</span><br><span class="line"> Stream:</span><br><span class="line">     [140]  -------------------</span><br><span class="line">     Quality:         audio/mp4; codecs=<span class="string">"mp4a.40.2"</span></span><br><span class="line">     Size:            3.17 MiB (3325319 Bytes)</span><br><span class="line">     <span class="comment"># download with: annie -f 140 ...</span></span><br><span class="line"></span><br><span class="line"> 3.17 MiB / 3.17 MiB [==============================================================================================================================================================================] 100.00% 147.17 KiB/s 22s</span><br><span class="line">ffmpeg version 4.1.5 Copyright (c) 2000-2020 the FFmpeg developers</span><br><span class="line">  built with gcc 9.2.0 (Alpine 9.2.0)</span><br><span class="line">  configuration: --<span class="built_in">disable</span>-debug --<span class="built_in">disable</span>-doc --<span class="built_in">disable</span>-ffplay --<span class="built_in">enable</span>-shared --<span class="built_in">enable</span>-avresample --<span class="built_in">enable</span>-libopencore-amrnb --<span class="built_in">enable</span>-libopencore-amrwb --<span class="built_in">enable</span>-gpl --<span class="built_in">enable</span>-libass --<span class="built_in">enable</span>-fontconfig --<span class="built_in">enable</span>-libfreetype --<span class="built_in">enable</span>-libvidstab --<span class="built_in">enable</span>-libmp3lame --<span class="built_in">enable</span>-libopus --<span class="built_in">enable</span>-libtheora --<span class="built_in">enable</span>-libvorbis --<span class="built_in">enable</span>-libvpx --<span class="built_in">enable</span>-libwebp --<span class="built_in">enable</span>-libxcb --<span class="built_in">enable</span>-libx265 --<span class="built_in">enable</span>-libxvid --<span class="built_in">enable</span>-libx264 --<span class="built_in">enable</span>-nonfree --<span class="built_in">enable</span>-openssl --<span class="built_in">enable</span>-libfdk_aac --<span class="built_in">enable</span>-postproc --<span class="built_in">enable</span>-small --<span class="built_in">enable</span>-version3 --<span class="built_in">enable</span>-libbluray --<span class="built_in">enable</span>-libzmq --extra-libs=-ldl --prefix=/opt/ffmpeg --<span class="built_in">enable</span>-libopenjpeg --<span class="built_in">enable</span>-libkvazaar --<span class="built_in">enable</span>-libaom --extra-libs=-lpthread --<span class="built_in">enable</span>-libsrt --extra-cflags=-I/opt/ffmpeg/include --extra-ldflags=-L/opt/ffmpeg/lib</span><br><span class="line">  libavutil      56. 22.100 / 56. 22.100</span><br><span class="line">  libavcodec     58. 35.100 / 58. 35.100</span><br><span class="line">  libavformat    58. 20.100 / 58. 20.100</span><br><span class="line">  libavdevice    58.  5.100 / 58.  5.100</span><br><span class="line">  libavfilter     7. 40.101 /  7. 40.101</span><br><span class="line">  libavresample   4.  0.  0 /  4.  0.  0</span><br><span class="line">  libswscale      5.  3.100 /  5.  3.100</span><br><span class="line">  libswresample   3.  3.100 /  3.  3.100</span><br><span class="line">  libpostproc    55.  3.100 / 55.  3.100</span><br><span class="line">Input <span class="comment">#0, mov,mp4,m4a,3gp,3g2,mj2, from './Pkh8UtuejGw.mp4':</span></span><br><span class="line">  Metadata:</span><br><span class="line">    major_brand     : dash</span><br><span class="line">    minor_version   : 0</span><br><span class="line">    compatible_brands: iso6mp41</span><br><span class="line">    creation_time   : 2020-03-12T06:21:25.000000Z</span><br><span class="line">  Duration: 00:03:25.43, start: 0.000000, bitrate: 129 kb/s</span><br><span class="line">    Stream <span class="comment">#0:0(eng): Audio: aac (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 6 kb/s (default)</span></span><br><span class="line">    Metadata:</span><br><span class="line">      creation_time   : 2020-03-12T06:21:25.000000Z</span><br><span class="line">      handler_name    : ISO Media file produced by Google Inc.</span><br><span class="line">Stream mapping:</span><br><span class="line">  Stream <span class="comment">#0:0 (aac) -&gt; afade</span></span><br><span class="line">  areverse -&gt; Stream <span class="comment">#0:0 (libvorbis)</span></span><br><span class="line">Press [q] to stop, [?] <span class="keyword">for</span> <span class="built_in">help</span></span><br><span class="line">Output <span class="comment">#0, ogg, to './Pkh8UtuejGw.ogg':</span></span><br><span class="line">  Metadata:</span><br><span class="line">    major_brand     : dash</span><br><span class="line">    minor_version   : 0</span><br><span class="line">    compatible_brands: iso6mp41</span><br><span class="line">    encoder         : Lavf58.20.100</span><br><span class="line">    Stream <span class="comment">#0:0: Audio: vorbis (libvorbis), 44100 Hz, stereo, fltp (default)</span></span><br><span class="line">    Metadata:</span><br><span class="line">      encoder         : Lavc58.35.100 libvorbis</span><br><span class="line">      major_brand     : dash</span><br><span class="line">      minor_version   : 0</span><br><span class="line">      compatible_brands: iso6mp41</span><br><span class="line">size=    1351kB time=00:00:29.99 bitrate= 368.9kbits/s speed=51.2x</span><br><span class="line">video:0kB audio:1340kB subtitle:0kB other streams:0kB global headers:4kB muxing overhead: 0.831372%</span><br><span class="line">ffmpeg version 4.1.5 Copyright (c) 2000-2020 the FFmpeg developers</span><br><span class="line">  built with gcc 9.2.0 (Alpine 9.2.0)</span><br><span class="line">  configuration: --<span class="built_in">disable</span>-debug --<span class="built_in">disable</span>-doc --<span class="built_in">disable</span>-ffplay --<span class="built_in">enable</span>-shared --<span class="built_in">enable</span>-avresample --<span class="built_in">enable</span>-libopencore-amrnb --<span class="built_in">enable</span>-libopencore-amrwb --<span class="built_in">enable</span>-gpl --<span class="built_in">enable</span>-libass --<span class="built_in">enable</span>-fontconfig --<span class="built_in">enable</span>-libfreetype --<span class="built_in">enable</span>-libvidstab --<span class="built_in">enable</span>-libmp3lame --<span class="built_in">enable</span>-libopus --<span class="built_in">enable</span>-libtheora --<span class="built_in">enable</span>-libvorbis --<span class="built_in">enable</span>-libvpx --<span class="built_in">enable</span>-libwebp --<span class="built_in">enable</span>-libxcb --<span class="built_in">enable</span>-libx265 --<span class="built_in">enable</span>-libxvid --<span class="built_in">enable</span>-libx264 --<span class="built_in">enable</span>-nonfree --<span class="built_in">enable</span>-openssl --<span class="built_in">enable</span>-libfdk_aac --<span class="built_in">enable</span>-postproc --<span class="built_in">enable</span>-small --<span class="built_in">enable</span>-version3 --<span class="built_in">enable</span>-libbluray --<span class="built_in">enable</span>-libzmq --extra-libs=-ldl --prefix=/opt/ffmpeg --<span class="built_in">enable</span>-libopenjpeg --<span class="built_in">enable</span>-libkvazaar --<span class="built_in">enable</span>-libaom --extra-libs=-lpthread --<span class="built_in">enable</span>-libsrt --extra-cflags=-I/opt/ffmpeg/include --extra-ldflags=-L/opt/ffmpeg/lib</span><br><span class="line">  libavutil      56. 22.100 / 56. 22.100</span><br><span class="line">  libavcodec     58. 35.100 / 58. 35.100</span><br><span class="line">  libavformat    58. 20.100 / 58. 20.100</span><br><span class="line">  libavdevice    58.  5.100 / 58.  5.100</span><br><span class="line">  libavfilter     7. 40.101 /  7. 40.101</span><br><span class="line">  libavresample   4.  0.  0 /  4.  0.  0</span><br><span class="line">  libswscale      5.  3.100 /  5.  3.100</span><br><span class="line">  libswresample   3.  3.100 /  3.  3.100</span><br><span class="line">  libpostproc    55.  3.100 / 55.  3.100</span><br><span class="line">Input <span class="comment">#0, ogg, from './Pkh8UtuejGw.ogg':</span></span><br><span class="line">  Duration: 00:00:30.00, start: 0.000000, bitrate: 368 kb/s</span><br><span class="line">    Stream <span class="comment">#0:0: Audio: vorbis, 44100 Hz, stereo, fltp, 499 kb/s</span></span><br><span class="line">    Metadata:</span><br><span class="line">      ENCODER         : Lavc58.35.100 libvorbis</span><br><span class="line">      MAJOR_BRAND     : dash</span><br><span class="line">      MINOR_VERSION   : 0</span><br><span class="line">      COMPATIBLE_BRANDS: iso6mp41</span><br><span class="line">Stream mapping:</span><br><span class="line">  Stream <span class="comment">#0:0 -&gt; #0:0 (vorbis (native) -&gt; aac (native))</span></span><br><span class="line">Press [q] to stop, [?] <span class="keyword">for</span> <span class="built_in">help</span></span><br><span class="line">Output <span class="comment">#0, ipod, to './Pkh8UtuejGw.m4a':</span></span><br><span class="line">  Metadata:</span><br><span class="line">    encoder         : Lavf58.20.100</span><br><span class="line">    Stream <span class="comment">#0:0: Audio: aac (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 128 kb/s</span></span><br><span class="line">    Metadata:</span><br><span class="line">      COMPATIBLE_BRANDS: iso6mp41</span><br><span class="line">      MAJOR_BRAND     : dash</span><br><span class="line">      MINOR_VERSION   : 0</span><br><span class="line">      encoder         : Lavc58.35.100 aac</span><br><span class="line">size=     479kB time=00:00:30.02 bitrate= 130.8kbits/s speed=55.3x</span><br><span class="line">video:0kB audio:472kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 1.506557%</span><br><span class="line">[aac @ 0x562a55f08640] Qavg: 217.142</span><br></pre></td></tr></table></figure><p>鈴聲直接輸出在執行 docker 路徑下 <code>./output</code> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls ./output/</span><br><span class="line">Pkh8UtuejGw.m4r</span><br></pre></td></tr></table></figure><p>剩下的就是將檔案傳至手機，透過 Garageband 輸出至 iPhone</p><p>DONE!</p><p>BTW. 有時候再來弄 UI</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近大竹弟打電話問說 iOS 鈴聲在 Garageband 上面製作的檔案怎麼這麼大，其實只有 5 秒的鈴聲&lt;/p&gt;
&lt;p&gt;先來說一下 iPhone 上配置客製的鈴聲有二種方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iTunes&lt;/li&gt;
&lt;li&gt;Garageband 上編輯直接輸出至鈴聲&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於 macOS 10.15 版本就沒有 itunes 可以用，所以基本上網路的教學大也是直接在 Garageband 上直接編輯後直接輸出至 iPhone 的鈴聲&lt;/p&gt;
&lt;p&gt;以前我自己也是換過不少鈴聲，以前是透過 &lt;a href=&quot;https://sur.ly/o/audiko.tw/AA000014&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Free Ringtones for Android and iPhone. Free Ringtone Maker - Audiko&lt;/a&gt; 選擇喜歡的檔案下載安裝&lt;/p&gt;
&lt;p&gt;雖然現成的工具方便，不過有時候找不到自己喜歡的歌曲，那就土砲一個吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://kaichu.io/tags/iOS/"/>
    
      <category term="docker" scheme="http://kaichu.io/tags/docker/"/>
    
      <category term="annie" scheme="http://kaichu.io/tags/annie/"/>
    
      <category term="ringtone" scheme="http://kaichu.io/tags/ringtone/"/>
    
      <category term="YouTube" scheme="http://kaichu.io/tags/YouTube/"/>
    
  </entry>
  
  <entry>
    <title>Establishing a Websocket PUBSUB server with NATS and Google App Engine</title>
    <link href="http://kaichu.io/2020/03/16/gae-custom-ws/"/>
    <id>http://kaichu.io/2020/03/16/gae-custom-ws/</id>
    <published>2020-03-15T18:00:55.000Z</published>
    <updated>2020-03-16T07:53:39.362Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在設計 API server 的時候會有遇到即時訊息傳遞的需求，同步可以用 GRPC 建立連線來溝通，為了降低系統的耦合性，可以選擇非同步的方式。而 PubSub 結合 websocket 是常用的方式。對於一位 Gopher 來說，<a href="https://nats.io/" target="_blank" rel="noopener">NATS</a> 是 <a href="https://www.cncf.io/" target="_blank" rel="noopener">CNCF</a> 下面中關於訊息傳遞的開源專案且對 Golang 友善(比 Kafka 好多了 XD)，選擇 <a href="https://nats.io/" target="_blank" rel="noopener">NATS</a> 的 PubSub 功能搭配 websocket 好像也是一個合理的選擇</p><a id="more"></a><p>在 Google App Engine 上搭建整個系統需要幾個知識點，讓我們一個一個來解釋，最後會附上完整的程式碼</p><p>Google App Engine 有一個很棒的功能是非常容易的建立 service，每一個 service 可以類比成 microservice。現在已經支援了 <code>Python</code>, <code>Java</code>, <code>Node.js</code>, <code>PHP</code>, <code>Runy</code>, <code>Go</code> 等幾種程式語言，也可以在 standard, flex, custom runtime (打包成 Docker 就不受到程式語言限制了) 中進行混搭，怎麼搭配就看題目進行選擇</p><p>不囉嗦，先看整個架構圖<br><img src="/img/gae-custom-ws-0.png" alt="infrastrucutre"></p><p>這邊我們有 3 個 service + 1 個 Google compute engine instance</p><ol><li>default (<code>us-central1</code>): 每一個 Google App Engine 一定要有一個 default service 且要第一個進行部署</li><li>add (<code>us-central1</code>): 核的的 service，提供 2 個 API，<code>sum</code> 和 <code>concat</code></li><li>ws (<code>us-central1</code>): 透過 <a href="https://nats.io/" target="_blank" rel="noopener">NATS</a> 的 client library + gorilla websocket 來實作</li><li>NATS (<code>asia-east1-b</code>): NATS 的 server</li></ol><h2 id="知識點"><a href="#知識點" class="headerlink" title="知識點"></a>知識點</h2><h4 id="Google-App-Engine-上實作-websocket-只能使用-flex-or-custom-runtime"><a href="#Google-App-Engine-上實作-websocket-只能使用-flex-or-custom-runtime" class="headerlink" title="## Google App Engine 上實作 websocket 只能使用 flex or custom runtime"></a>## Google App Engine 上實作 websocket 只能使用 flex or custom runtime</h4><p>這個是一個基本限制，如果在 Google App Engine 上有建立 websocket 的需求，只能選擇 <code>flex</code> or <code>custom</code> runtime. Google 官網有好幾個程式語言的範例<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Creating Persistent Connections with WebSockets](https://cloud.google.com/appengine/docs/flexible/go/using-websockets-and-session-affinity), 換程式語言也對應到相關的範例">[1]</span></a></sup></p><h4 id="部著-NATS-server"><a href="#部著-NATS-server" class="headerlink" title="## 部著 NATS server"></a>## 部著 NATS server</h4><p>稍早提過，<a href="https://nats.io/" target="_blank" rel="noopener">NATS</a> 是 <a href="https://www.cncf.io/" target="_blank" rel="noopener">CNCF</a> 下面中關於訊息傳遞的開源專案且可以視為 cloud native (rock)，部署一個 NATS server 非常簡單。docker 就可以跑了，在 Google Cloud Platfrom 上我們可以透過 <a href="https://cloud.google.com/deployment-manager" target="_blank" rel="noopener">Cloud Deployment Manager</a> 一鍵部署一個 NATS Certified by Bitnami</p><p><img src="/img/gae-custom-ws-2.png" alt="NATS Certified by Bitnami"></p><p>部著成功之後可以查看到相關的訊息，包含要連線的密碼</p><h4 id="Google-App-Engine-Access-NATS-server-via-Serverless-VPC"><a href="#Google-App-Engine-Access-NATS-server-via-Serverless-VPC" class="headerlink" title="## Google App Engine Access NATS server via Serverless VPC"></a>## Google App Engine Access NATS server via Serverless VPC</h4><p>當我們一開始建立 Google App Engine 專案時我問我們要部署在什麼 region</p><ul><li><code>northamerica-northeast1</code> (Montréal)</li><li><code>us-central</code> (Iowa)</li><li><code>us-west2</code> (Los Angeles)</li><li><code>us-west3</code> (Salt Lake City)</li><li><code>us-east1</code> (South Carolina)</li><li><code>us-east4</code> (Northern Virginia)</li><li><code>southamerica-east1</code> (São Paulo)</li><li><code>europe-west</code> (Belgium)</li><li><code>europe-west2</code> (London)</li><li><code>europe-west3</code> (Frankfurt)</li><li><code>europe-west6</code> (Zürich)</li><li><code>asia-northeast1</code> (Tokyo)</li><li><code>asia-northeast2</code> (Osaka)</li><li><code>asia-northeast3</code> (Seoul)</li><li><code>asia-east2</code> (Hong Kong)</li><li><code>asia-south1</code> (Mumbai)</li><li><code>australia-southeast1</code> (Sydney)</li></ul><blockquote><p>asia 中日本，韓國，香港都有，台灣就是沒有，表示哭哭</p></blockquote><p>當我們使用 standard runtime 建立的應用程式有需要跟我們自己建立的 Google compute engine instance 進行溝通時，就必需透過 <code>VPC</code> 進行連線，阿不是在 GCP 專案下的機器是相通的嗎？</p><blockquote><p>一個簡單的判別方式，如果服務可以讓你設定 <code>network</code> 相關的設定就是；Google app engine standard runtime <code>app.yaml</code> 並沒有 <code>network</code> 相關可以配置的設定 (flex, custom runtime 中有)。而在 standard runtime 的 <code>beta</code> 中可以讓我們在 <code>app.yaml</code> 透過指定 <code>vpc_access_connector</code> 來 <a href="https://cloud.google.com/vpc/docs/configure-serverless-vpc-access" target="_blank" rel="noopener">Configuring Serverless VPC Access</a> 存取 Google compute engine<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="現在 `vpc_access_connector` 屬於 beta，所以在需要使用 `gcloud beta app deploy ...`">[2]</span></a></sup> 上相關的資源</p></blockquote><h4 id="透過-cloudbuild-部署整個-app-engine-application-需要的啟用的-API及權限"><a href="#透過-cloudbuild-部署整個-app-engine-application-需要的啟用的-API及權限" class="headerlink" title="## 透過 cloudbuild 部署整個 app engine application 需要的啟用的 API及權限"></a>## 透過 cloudbuild 部署整個 app engine application 需要的啟用的 API及權限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud app GROUP | COMMAND [GCLOUD_WIDE_FLAG ...]</span><br></pre></td></tr></table></figure><p>部署 Google app engine 的方式為使用 <code>gcloud</code> command，當數量少的時候可以手動進行部署，不過當 <code>service</code> 數量多時候，手動部署是很累人的，所以透過 <a href="https://cloud.google.com/cloud-build" target="_blank" rel="noopener">Cloud Build</a> 就是一個簡單的方式，要注意的部份是，在 local 時是以 <code>gcloud auth</code> 的身份進行部署，不過在 cloud build 中是透過 cloud build 的 service account (<a href="mailto:`xxx@cloudbuild.gserviceaccount.com" target="_blank" rel="noopener">`xxx@cloudbuild.gserviceaccount.com</a>`), 所以需在啟用相關的 API 及配置相關應的權限給 cloud build 的 service account 才不會報錯</p><p>需要特別啟用的 API</p><ul><li>Cloud Build API</li><li>App Engine Admin API: 在 Cloud build 中的設定直接 enable 就好</li><li>Serverless VPC Access API</li></ul><p><strong>cloudbuild.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">timeout:</span> <span class="string">1200s</span> <span class="comment"># 20 mins</span></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">deploy</span> <span class="string">website</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gcr.io/cloud-builders/gcloud</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">app</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">website/app.yaml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--version=$SHORT_SHA</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--project=$PROJECT_ID</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-q</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">deploy</span> <span class="string">add</span> <span class="string">service</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gcr.io/cloud-builders/gcloud</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">beta</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">app</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cmd/add/app.yaml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--version=$SHORT_SHA</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--project=$PROJECT_ID</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-q</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">build</span> <span class="string">ws</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gcr.io/cloud-builders/docker</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">bash</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-exc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line">        <span class="string">docker</span> <span class="string">build</span> <span class="string">--tag</span> <span class="string">gcr.io/$PROJECT_ID/ws:$COMMIT_SHA</span> <span class="string">--tag</span> <span class="string">gcr.io/$PROJECT_ID/ws:$SHORT_SHA</span> <span class="string">--file</span> <span class="string">Dockerfile.ws</span> <span class="string">.</span></span><br><span class="line">        <span class="string">docker</span> <span class="string">push</span> <span class="string">gcr.io/$PROJECT_ID/ws:$COMMIT_SHA</span></span><br><span class="line">        <span class="string">docker</span> <span class="string">push</span> <span class="string">gcr.io/$PROJECT_ID/ws:$SHORT_SHA</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">deploy</span> <span class="string">ws</span> <span class="string">service</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gcr.io/cloud-builders/gcloud</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">beta</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">app</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cmd/ws/app.yaml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--version=$SHORT_SHA</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--project=$PROJECT_ID</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--image-url=gcr.io/$PROJECT_ID/ws:$SHORT_SHA</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-q</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">deploy</span> <span class="string">disptach</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gcr.io/cloud-builders/gcloud</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">app</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dispatch.yaml</span></span><br></pre></td></tr></table></figure><p>cloud build 中的流程是</p><ol><li>deploy website: default service, golang standard runtime</li><li>deploy add: add service, golang standard runtime</li><li>build ws docker image and push to gcr.io</li><li>deploy ws service, golang custom runtime</li><li>update disptach</li></ol><p>需要配置以下權限給 cloud build service account</p><ol><li><code>App Engine Admin</code>: cloud build deploy Google app engine</li><li><code>Cloud Build Service</code> Account: (default)</li><li><code>Compute Network User</code>: Access network</li><li><code>Serverless VPC Access User</code>: The “vpcaccess.connectors.use” permission is required.</li></ol><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><img src="/img/gae-custom-ws-4.gif" alt="demo"></p><blockquote><p>Google app engine 還有一個佛心的部份就是自帶 HTTPS，所以我們實作的 websocket entrypoint 也可從 <code>ws://</code> 直接轉成 <code>wss://</code> (rock)</p></blockquote><h2 id="repo"><a href="#repo" class="headerlink" title="repo"></a>repo</h2><p><a href="https://github.com/cage1016/gae-custom-ws" target="_blank" rel="noopener">https://github.com/cage1016/gae-custom-ws</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://cloud.google.com/appengine/docs/flexible/go/using-websockets-and-session-affinity" target="_blank" rel="noopener">Creating Persistent Connections with WebSockets</a>, 換程式語言也對應到相關的範例<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">現在 <code>vpc_access_connector</code> 屬於 beta，所以在需要使用 <code>gcloud beta app deploy …</code><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在設計 API server 的時候會有遇到即時訊息傳遞的需求，同步可以用 GRPC 建立連線來溝通，為了降低系統的耦合性，可以選擇非同步的方式。而 PubSub 結合 websocket 是常用的方式。對於一位 Gopher 來說，&lt;a href=&quot;https://nats.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NATS&lt;/a&gt; 是 &lt;a href=&quot;https://www.cncf.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CNCF&lt;/a&gt; 下面中關於訊息傳遞的開源專案且對 Golang 友善(比 Kafka 好多了 XD)，選擇 &lt;a href=&quot;https://nats.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NATS&lt;/a&gt; 的 PubSub 功能搭配 websocket 好像也是一個合理的選擇&lt;/p&gt;
    
    </summary>
    
    
      <category term="GCP" scheme="http://kaichu.io/tags/GCP/"/>
    
      <category term="GAE" scheme="http://kaichu.io/tags/GAE/"/>
    
      <category term="Golang" scheme="http://kaichu.io/tags/Golang/"/>
    
      <category term="Google compute engine" scheme="http://kaichu.io/tags/Google-compute-engine/"/>
    
      <category term="websocket" scheme="http://kaichu.io/tags/websocket/"/>
    
      <category term="NATS" scheme="http://kaichu.io/tags/NATS/"/>
    
      <category term="CloudBuild" scheme="http://kaichu.io/tags/CloudBuild/"/>
    
  </entry>
  
  <entry>
    <title>Skaffold debug goland</title>
    <link href="http://kaichu.io/2019/10/04/skaffold-debug-goland/"/>
    <id>http://kaichu.io/2019/10/04/skaffold-debug-goland/</id>
    <published>2019-10-03T17:03:16.000Z</published>
    <updated>2020-03-16T07:53:39.363Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>今年的 <a href="https://inthecloud.withgoogle.com/summit-tpe-19/agenda.html" target="_blank" rel="noopener">Google Cloud Summit 台北場</a> 於 9/24 在內湖萬豪酒店舉行，在主題演講中再次聽到 <a href="https://cloud.google.com/code" target="_blank" rel="noopener">Cloud Code</a> 的部份也看到比較有感覺的 Live demo</p><blockquote><p>Cloud Code 隨附的工具能協助您以輕鬆快速的方式編寫、部署及偵錯雲端原生的應用程式。這項產品提供 Visual Studio Code 和 IntelliJ 等 IDE 的擴充功能，方便您在 Kubernetes 上針對程式碼快速進行疊代、偵錯及部署等作業。<br>&nbsp;<br>Cloud Code 是基於 <a href="https://github.com/GoogleContainerTools/skaffold" target="_blank" rel="noopener">GoogleContainerTools/skaffold: Easy and Repeatable Kubernetes Development</a> 為基礎上再整合 Visual Studio Code 和 IntelliJ IDE, 讓開發者可以直接在 IDE 上就可以快速開發 Kubernetes 上的應用程式</p></blockquote><p>基本上來說 Cloud Code 給 Visual Studio Code 和 IntelliJ IDE 的 plugin 就是基於 skaffold 打造的(如下圖)，當你在 Visual Studio Code 執行(cmd+shift+p) <code>Cloud Code: Continues Deploy</code> 的 log 就會知道</p><p><img src="/img/skaffold-go-debug-image-4.png" alt></p><a id="more"></a><h2 id="Cloud-Code-amp-debug"><a href="#Cloud-Code-amp-debug" class="headerlink" title="Cloud Code &amp; debug"></a>Cloud Code &amp; debug</h2><p>在談談 Skaffold debug k8s golang 的程式前，先來看看目前 Cloud Code debug 的部份支援幾種程式語言</p><p><em>Visual Studio Code 中 Cloud code 可以新增的專案範本</em></p><p><img src="/img/skaffold-go-debug-image-5.png" alt></p><blockquote><p>依照官方文件，現在 Cloud Code 有整合 debug 的部份有 <code>Node.js</code>、 <code>Python</code>、<code>Java</code>。 <code>Go</code> 目前不支援, 不過在 skaffold v38.0 的時候終於加進了. (Add Go container debugging support <a href="https://github.com/GoogleContainerTools/skaffold/pull/2306" target="_blank" rel="noopener">#2306</a>)，所以就有了這一篇文章。至於本來 Cloud Code 就有整合的語言就依照官方的操作流程應該就可以正常運作，所以這邊就不在說明了</p></blockquote><h2 id="Golang-debug-amp-skaffold"><a href="#Golang-debug-amp-skaffold" class="headerlink" title="Golang debug &amp; skaffold"></a>Golang debug &amp; skaffold</h2><p>當我們開發 kubernetes 應用程式(golang)會有 remote debug 的需求，在 skaffold v38.0 版之前 remote debug golang 是需要比較複雜的方式(docker-compose or kubernetes))</p><p><strong>之前我們怎麼進行 remote debug golang</strong></p><ol><li>編譯 binary 時需要加入 <code>github.com/derekparker/delve/cmd/dlv</code></li><li>執行 binary 時需要帶入 <code>CMD [&quot;/go/bin/dlv&quot;, &quot;--listen=:2345&quot;, &quot;--headless=true&quot;, &quot;--api-version=2&quot;, &quot;exec&quot;, &quot;/exe&quot;]</code></li><li><p>docker-compose &amp; kubernetes YAML 檔都需要加入額外的聲明(完整的 yaml 範例可以看 <a href="https://github.com/cage1016/gokitconsul/blob/master/deployments/docker/docker-compose-debug.yaml#L57-L85" target="_blank" rel="noopener">這</a>)</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">security_opt:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apparmor:unconfined</span></span><br><span class="line"><span class="attr">cap_add:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SYS_PTRACE</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure></li><li><p>需要 port forwarding dlv debug port 到本機</p></li><li>透過 localhost port forwarding 就可以 attach 到 remote 的 golang </li></ol><p>步驟有一點麻煩</p><p><strong>當 skaffold v38.0 開始支援 container debugging support，事情就變簡單了</strong></p><ol><li>remote debug 還是需要 <code>dlv</code>，不過 skaffold 透過 kubernetes 中的 initContainers 的方式來幫我們載入(Mount)相關的套件(dlv/dbg)，且會自動識別 runtime 來決定載入的套件，需 golang 的部份就在 <code>gcr.io/gcp-dev-tools/duct-tape/go</code>，(其他的 runtime 可由 <a href="https://github.com/GoogleContainerTools/container-debug-support/" target="_blank" rel="noopener">https://github.com/GoogleContainerTools/container-debug-support/</a> 查詢)，並且會在 metadata 的 anootation 中加上 <code>debug.cloud.google.com/config: {&quot;addsvc&quot;:{&quot;dlv&quot;:56268,&quot;runtime&quot;:&quot;go&quot;}}</code></li><li><p>remote debug 還是需要 <code>dlv</code> 相關的啟動參數，skaffold 會自動幫我載入 </p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Containers:</span></span><br><span class="line">    <span class="attr">addsvc:</span></span><br><span class="line">        <span class="attr">Container ID:</span>  <span class="string">docker://493a405f1dc0ee462f4e5f269ae2fdb352e8468c186cbb26905c42e0bf5675cf</span></span><br><span class="line">        <span class="attr">Image:</span>         <span class="string">cage1016/skaffold-debug-go-demo-addsvc:88f846061af2d34e8347a6325dcf48bb638f6baa50fd4599240fa5280054048e</span></span><br><span class="line">        <span class="attr">Image ID:</span>      <span class="string">docker://sha256:88f846061af2d34e8347a6325dcf48bb638f6baa50fd4599240fa5280054048e</span></span><br><span class="line">        <span class="attr">Ports:</span>         <span class="number">8020</span><span class="string">/TCP,</span> <span class="number">8021</span><span class="string">/TCP,</span> <span class="number">56268</span><span class="string">/TCP</span></span><br><span class="line">        <span class="attr">Host Ports:</span>    <span class="number">0</span><span class="string">/TCP,</span> <span class="number">0</span><span class="string">/TCP,</span> <span class="number">0</span><span class="string">/TCP</span></span><br><span class="line">        <span class="attr">Command:</span></span><br><span class="line">            <span class="string">/dbg/go/bin/dlv</span></span><br><span class="line">            <span class="string">exec</span></span><br><span class="line">            <span class="string">--headless</span></span><br><span class="line">            <span class="string">--continue</span></span><br><span class="line">            <span class="string">--accept-multiclient</span></span><br><span class="line">            <span class="string">--listen=localhost:56268</span></span><br><span class="line">            <span class="string">--api-version=2</span></span><br><span class="line">            <span class="string">/exe</span></span><br></pre></td></tr></table></figure></li><li><p>docker-compose &amp; kubernetes YAML <code>不</code>需要再加註其他的聲明</p></li><li>Cloud Code 上跑 skaffold debug 會自動幫我們建立 port forwarding</li><li>Cloud Code 上進行 deubg 的設定， <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"cloudcode"</span>,</span><br><span class="line">    <span class="attr">"language"</span>: <span class="string">"Go"</span>,</span><br><span class="line">    <span class="attr">"request"</span>: <span class="string">"attach"</span>,</span><br><span class="line">    <span class="attr">"debugPort"</span>: <span class="number">56268</span>,</span><br><span class="line">    <span class="attr">"localRoot"</span>: <span class="string">"$&#123;workspaceFolder&#125;/go"</span>,</span><br><span class="line">    <span class="attr">"remoteRoot"</span>: <span class="string">"/go/"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"skaffold-debug-go-demo"</span>,</span><br><span class="line">    <span class="attr">"podSelector"</span>: &#123;</span><br><span class="line">        <span class="attr">"app"</span>: <span class="string">"addsvc"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><blockquote><p>repo: <a href="https://github.com/cage1016/skaffold-debug-goland-demo" target="_blank" rel="noopener">https://github.com/cage1016/skaffold-debug-goland-demo</a></p></blockquote><p><img src="/img/skaffold-debug-goland-demo.gif" alt></p><p><strong>操作步驟</strong></p><ol><li><p>git clone </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:cage1016/skaffold-debug-goland-demo.git</span><br></pre></td></tr></table></figure></li><li><p>skaffod debug</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ skaffold debug -p debug</span><br><span class="line">Listing files to watch...</span><br><span class="line">List generated <span class="keyword">in</span> 81.41µs</span><br><span class="line">Generating tags...</span><br><span class="line"> - cage1016/skaffold-debug-go-demo-addsvc -&gt; cage1016/skaffold-debug-go-demo-addsvc:latest</span><br><span class="line">Tags generated <span class="keyword">in</span> 130.733µs</span><br><span class="line">Checking cache...</span><br><span class="line"> - cage1016/skaffold-debug-go-demo-addsvc: Found</span><br><span class="line">Cache check complete <span class="keyword">in</span> 48.237684ms</span><br><span class="line">Tags used <span class="keyword">in</span> deployment:</span><br><span class="line"> - Since images are not pushed, they can<span class="string">'t be referenced by digest</span></span><br><span class="line"><span class="string">   They are tagged and referenced by a unique ID instead</span></span><br><span class="line"><span class="string"> - cage1016/skaffold-debug-go-demo-addsvc -&gt; cage1016/skaffold-debug-go-demo-addsvc:88f846061af2d34e8347a6325dcf48bb638f6baa50fd4599240fa5280054048e</span></span><br><span class="line"><span class="string">Starting deploy...</span></span><br><span class="line"><span class="string"> - deployment.apps/addsvc created</span></span><br><span class="line"><span class="string"> - service/addsvc created</span></span><br><span class="line"><span class="string">Deploy complete in 655.821236ms</span></span><br><span class="line"><span class="string">Watching for changes...</span></span><br><span class="line"><span class="string">[addsvc-577bc59f76-n9w4w install-go-support] Installing runtime debugging support files in /dbg</span></span><br><span class="line"><span class="string">[addsvc-577bc59f76-n9w4w install-go-support] Installation complete</span></span><br><span class="line"><span class="string">[addsvc-577bc59f76-n9w4w addsvc] API server listening at: 127.0.0.1:56268</span></span><br><span class="line"><span class="string">[addsvc-577bc59f76-n9w4w addsvc] level=info ts=2019-10-03T16:24:15.4025831Z caller=main.go:138 service=addsvc protocol=HTTP exposed=8020</span></span><br><span class="line"><span class="string">[addsvc-577bc59f76-n9w4w addsvc] level=info ts=2019-10-03T16:24:15.4040995Z caller=main.go:151 service=addsvc protocol=GRPC protocol=GRPC exposed=8021</span></span><br><span class="line"><span class="string">[addsvc-577bc59f76-n9w4w install-go-support] &lt;Container was Terminated&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>設定中斷點</p></li><li><p>啟動 Visual Studio Code 功能 (skaffold-debug-go-demo)<br><img src="/img/skaffold-go-debug-image-6.png" alt></p></li><li><p>send request</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ make sum</span><br><span class="line">curl -X <span class="string">"POST"</span> <span class="string">"http://localhost:8020/sum"</span> -H <span class="string">'Content-Type: application/json; charset=utf-8'</span> -d <span class="string">'&#123; "a": 3, "b": 34&#125;'</span></span><br><span class="line">&#123;<span class="string">"rs"</span>:37,<span class="string">"err"</span>:null&#125;</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">$ make concat</span><br><span class="line">curl -X <span class="string">"POST"</span> <span class="string">"http://localhost:8020/concat"</span> -H <span class="string">'Content-Type: application/json; charset=utf-8'</span> -d <span class="string">'&#123; "a": "3", "b": "34"&#125;'</span></span><br><span class="line">&#123;<span class="string">"rs"</span>:<span class="string">"334"</span>,<span class="string">"err"</span>:null&#125;</span><br></pre></td></tr></table></figure></li><li><p>這時候應該就可以正確跳至中斷點<br><img src="/img/skaffold-go-debug-image-7.png" alt></p></li></ol><p><strong>完整的 pod</strong></p><blockquote><p>可以參照上面的說明來看</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">describe</span> <span class="string">po</span> <span class="string">addsvc-577bc59f76-n9w4w</span></span><br><span class="line"><span class="attr">Name:</span>           <span class="string">addsvc-577bc59f76-n9w4w</span></span><br><span class="line"><span class="attr">Namespace:</span>      <span class="string">default</span></span><br><span class="line"><span class="attr">Node:</span>           <span class="string">docker-for-desktop/192.168.65.3</span></span><br><span class="line"><span class="attr">Start Time:</span>     <span class="string">Fri,</span> <span class="number">04</span> <span class="string">Oct</span> <span class="number">2019</span> <span class="number">00</span><span class="string">:24:11</span> <span class="string">+0800</span></span><br><span class="line"><span class="attr">Labels:</span>         <span class="string">app=addsvc</span></span><br><span class="line">                <span class="string">app.kubernetes.io/managed-by=skaffold-v0.39.0</span></span><br><span class="line">                <span class="string">pod-template-hash=1336715932</span></span><br><span class="line">                <span class="string">skaffold.dev/builder=local</span></span><br><span class="line">                <span class="string">skaffold.dev/cleanup=true</span></span><br><span class="line">                <span class="string">skaffold.dev/deployer=kubectl</span></span><br><span class="line">                <span class="string">skaffold.dev/docker-api-version=1.39</span></span><br><span class="line">                <span class="string">skaffold.dev/profiles=debug</span></span><br><span class="line">                <span class="string">skaffold.dev/run-id=b77af1a5-0d52-4259-98d7-d1b09ed73c47</span></span><br><span class="line">                <span class="string">skaffold.dev/tag-policy=sha256</span></span><br><span class="line">                <span class="string">skaffold.dev/tail=true</span></span><br><span class="line"><span class="attr">Annotations:    debug.cloud.google.com/config:</span> <span class="string">&#123;"addsvc":&#123;"dlv":56268,"runtime":"go"&#125;&#125;</span></span><br><span class="line"><span class="attr">Status:</span>         <span class="string">Running</span></span><br><span class="line"><span class="attr">IP:</span>             <span class="number">10.1</span><span class="number">.7</span><span class="number">.116</span></span><br><span class="line"><span class="attr">Controlled By:</span>  <span class="string">ReplicaSet/addsvc-577bc59f76</span></span><br><span class="line"><span class="attr">Init Containers:</span></span><br><span class="line">  <span class="attr">install-go-support:</span></span><br><span class="line">    <span class="attr">Container ID:</span>   <span class="string">docker://d7eb281035a72d6eb522860f6783eddaa146a3347c4b07ba41864dd5d1b1c5e9</span></span><br><span class="line">    <span class="attr">Image:</span>          <span class="string">gcr.io/gcp-dev-tools/duct-tape/go</span></span><br><span class="line">    <span class="attr">Image ID:</span>       <span class="string">docker-pullable://gcr.io/gcp-dev-tools/duct-tape/go@sha256:bacfc35dcd3b2c949f16290fbfcf82079a2b206deec2ee57e9606dfe7a913d71</span></span><br><span class="line">    <span class="attr">Port:</span>           <span class="string">&lt;none&gt;</span></span><br><span class="line">    <span class="attr">Host Port:</span>      <span class="string">&lt;none&gt;</span></span><br><span class="line">    <span class="attr">State:</span>          <span class="string">Terminated</span></span><br><span class="line">      <span class="attr">Reason:</span>       <span class="string">Completed</span></span><br><span class="line">      <span class="attr">Exit Code:</span>    <span class="number">0</span></span><br><span class="line">      <span class="attr">Started:</span>      <span class="string">Fri,</span> <span class="number">04</span> <span class="string">Oct</span> <span class="number">2019</span> <span class="number">00</span><span class="string">:24:13</span> <span class="string">+0800</span></span><br><span class="line">      <span class="attr">Finished:</span>     <span class="string">Fri,</span> <span class="number">04</span> <span class="string">Oct</span> <span class="number">2019</span> <span class="number">00</span><span class="string">:24:13</span> <span class="string">+0800</span></span><br><span class="line">    <span class="attr">Ready:</span>          <span class="literal">True</span></span><br><span class="line">    <span class="attr">Restart Count:</span>  <span class="number">0</span></span><br><span class="line">    <span class="attr">Environment:</span>    <span class="string">&lt;none&gt;</span></span><br><span class="line">    <span class="attr">Mounts:</span></span><br><span class="line">      <span class="string">/dbg</span> <span class="string">from</span> <span class="string">debugging-support-files</span> <span class="string">(rw)</span></span><br><span class="line">      <span class="string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="string">from</span> <span class="string">default-token-w97gc</span> <span class="string">(ro)</span></span><br><span class="line"><span class="attr">Containers:</span></span><br><span class="line">  <span class="attr">addsvc:</span></span><br><span class="line">    <span class="attr">Container ID:</span>  <span class="string">docker://493a405f1dc0ee462f4e5f269ae2fdb352e8468c186cbb26905c42e0bf5675cf</span></span><br><span class="line">    <span class="attr">Image:</span>         <span class="string">cage1016/skaffold-debug-go-demo-addsvc:88f846061af2d34e8347a6325dcf48bb638f6baa50fd4599240fa5280054048e</span></span><br><span class="line">    <span class="attr">Image ID:</span>      <span class="string">docker://sha256:88f846061af2d34e8347a6325dcf48bb638f6baa50fd4599240fa5280054048e</span></span><br><span class="line">    <span class="attr">Ports:</span>         <span class="number">8020</span><span class="string">/TCP,</span> <span class="number">8021</span><span class="string">/TCP,</span> <span class="number">56268</span><span class="string">/TCP</span></span><br><span class="line">    <span class="attr">Host Ports:</span>    <span class="number">0</span><span class="string">/TCP,</span> <span class="number">0</span><span class="string">/TCP,</span> <span class="number">0</span><span class="string">/TCP</span></span><br><span class="line">    <span class="attr">Command:</span></span><br><span class="line">      <span class="string">/dbg/go/bin/dlv</span></span><br><span class="line">      <span class="string">exec</span></span><br><span class="line">      <span class="string">--headless</span></span><br><span class="line">      <span class="string">--continue</span></span><br><span class="line">      <span class="string">--accept-multiclient</span></span><br><span class="line">      <span class="string">--listen=localhost:56268</span></span><br><span class="line">      <span class="string">--api-version=2</span></span><br><span class="line">      <span class="string">/exe</span></span><br><span class="line">    <span class="attr">State:</span>          <span class="string">Running</span></span><br><span class="line">      <span class="attr">Started:</span>      <span class="string">Fri,</span> <span class="number">04</span> <span class="string">Oct</span> <span class="number">2019</span> <span class="number">00</span><span class="string">:24:14</span> <span class="string">+0800</span></span><br><span class="line">    <span class="attr">Ready:</span>          <span class="literal">True</span></span><br><span class="line">    <span class="attr">Restart Count:</span>  <span class="number">0</span></span><br><span class="line">    <span class="attr">Environment:</span></span><br><span class="line">      <span class="attr">QS_ADDSVC_GRPC_PORT:</span>  <span class="number">8021</span></span><br><span class="line">      <span class="attr">QS_ADDSVC_HTTP_PORT:</span>  <span class="number">8020</span></span><br><span class="line">      <span class="attr">QS_ADDSVC_LOG_LEVEL:</span>  <span class="string">info</span></span><br><span class="line">    <span class="attr">Mounts:</span></span><br><span class="line">      <span class="string">/dbg</span> <span class="string">from</span> <span class="string">debugging-support-files</span> <span class="string">(rw)</span></span><br><span class="line">      <span class="string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="string">from</span> <span class="string">default-token-w97gc</span> <span class="string">(ro)</span></span><br><span class="line"><span class="attr">Conditions:</span></span><br><span class="line">  <span class="string">Type</span>           <span class="string">Status</span></span><br><span class="line">  <span class="string">Initialized</span>    <span class="literal">True</span></span><br><span class="line">  <span class="string">Ready</span>          <span class="literal">True</span></span><br><span class="line">  <span class="string">PodScheduled</span>   <span class="literal">True</span></span><br><span class="line"><span class="attr">Volumes:</span></span><br><span class="line">  <span class="attr">debugging-support-files:</span></span><br><span class="line">    <span class="attr">Type:</span>    <span class="string">EmptyDir</span> <span class="string">(a</span> <span class="string">temporary</span> <span class="string">directory</span> <span class="string">that</span> <span class="string">shares</span> <span class="string">a</span> <span class="string">pod's</span> <span class="string">lifetime)</span></span><br><span class="line">    <span class="attr">Medium:</span></span><br><span class="line">  <span class="attr">default-token-w97gc:</span></span><br><span class="line">    <span class="attr">Type:</span>        <span class="string">Secret</span> <span class="string">(a</span> <span class="string">volume</span> <span class="string">populated</span> <span class="string">by</span> <span class="string">a</span> <span class="string">Secret)</span></span><br><span class="line">    <span class="attr">SecretName:</span>  <span class="string">default-token-w97gc</span></span><br><span class="line">    <span class="attr">Optional:</span>    <span class="literal">false</span></span><br><span class="line"><span class="attr">QoS Class:</span>       <span class="string">BestEffort</span></span><br><span class="line"><span class="attr">Node-Selectors:</span>  <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="attr">Tolerations:</span>     <span class="string">node.kubernetes.io/not-ready:NoExecute</span> <span class="string">for</span> <span class="string">300s</span></span><br><span class="line">                 <span class="string">node.kubernetes.io/unreachable:NoExecute</span> <span class="string">for</span> <span class="string">300s</span></span><br><span class="line"><span class="attr">Events:</span></span><br><span class="line">  <span class="string">Type</span>    <span class="string">Reason</span>                 <span class="string">Age</span>   <span class="string">From</span>                         <span class="string">Message</span></span><br><span class="line">  <span class="string">----</span>    <span class="string">------</span>                 <span class="string">----</span>  <span class="string">----</span>                         <span class="string">-------</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">Scheduled</span>              <span class="string">51s</span>   <span class="string">default-scheduler</span>            <span class="string">Successfully</span> <span class="string">assigned</span> <span class="string">addsvc-577bc59f76-n9w4w</span> <span class="string">to</span> <span class="string">docker-for-desktop</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">SuccessfulMountVolume</span>  <span class="string">51s</span>   <span class="string">kubelet,</span> <span class="string">docker-for-desktop</span>  <span class="string">MountVolume.SetUp</span> <span class="string">succeeded</span> <span class="string">for</span> <span class="string">volume</span> <span class="string">"debugging-support-files"</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">SuccessfulMountVolume</span>  <span class="string">51s</span>   <span class="string">kubelet,</span> <span class="string">docker-for-desktop</span>  <span class="string">MountVolume.SetUp</span> <span class="string">succeeded</span> <span class="string">for</span> <span class="string">volume</span> <span class="string">"default-token-w97gc"</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">Pulling</span>                <span class="string">50s</span>   <span class="string">kubelet,</span> <span class="string">docker-for-desktop</span>  <span class="string">pulling</span> <span class="string">image</span> <span class="string">"gcr.io/gcp-dev-tools/duct-tape/go"</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">Pulled</span>                 <span class="string">49s</span>   <span class="string">kubelet,</span> <span class="string">docker-for-desktop</span>  <span class="string">Successfully</span> <span class="string">pulled</span> <span class="string">image</span> <span class="string">"gcr.io/gcp-dev-tools/duct-tape/go"</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">Created</span>                <span class="string">49s</span>   <span class="string">kubelet,</span> <span class="string">docker-for-desktop</span>  <span class="string">Created</span> <span class="string">container</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">Started</span>                <span class="string">49s</span>   <span class="string">kubelet,</span> <span class="string">docker-for-desktop</span>  <span class="string">Started</span> <span class="string">container</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">Pulled</span>                 <span class="string">48s</span>   <span class="string">kubelet,</span> <span class="string">docker-for-desktop</span>  <span class="string">Container</span> <span class="string">image</span> <span class="string">"cage1016/skaffold-debug-go-demo-addsvc:88f846061af2d34e8347a6325dcf48bb638f6baa50fd4599240fa5280054048e"</span> <span class="string">already</span> <span class="string">present</span> <span class="string">on</span> <span class="string">machine</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">Created</span>                <span class="string">48s</span>   <span class="string">kubelet,</span> <span class="string">docker-for-desktop</span>  <span class="string">Created</span> <span class="string">container</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">Started</span>                <span class="string">48s</span>   <span class="string">kubelet,</span> <span class="string">docker-for-desktop</span>  <span class="string">Started</span> <span class="string">container</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://is.gd/KnwJi0" target="_blank" rel="noopener">cage1016/skaffold-debug-go-demo: demo how to use skaffold remote debug k8s golang microservice</a></li><li><a href="https://skaffold.dev/docs/how-tos/debug/" target="_blank" rel="noopener">Debugging with Skaffold | Skaffold</a></li><li><a href="https://github.com/GoogleContainerTools/skaffold/pull/2306" target="_blank" rel="noopener">Add Go container debugging support by briandealwis · Pull Request #2306 · GoogleContainerTools/skaffold</a></li><li><a href="https://github.com/GoogleContainerTools/container-debug-support/" target="_blank" rel="noopener">GoogleContainerTools/container-debug-support: Language-runtime support files for debugging</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年的 &lt;a href=&quot;https://inthecloud.withgoogle.com/summit-tpe-19/agenda.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google Cloud Summit 台北場&lt;/a&gt; 於 9/24 在內湖萬豪酒店舉行，在主題演講中再次聽到 &lt;a href=&quot;https://cloud.google.com/code&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cloud Code&lt;/a&gt; 的部份也看到比較有感覺的 Live demo&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cloud Code 隨附的工具能協助您以輕鬆快速的方式編寫、部署及偵錯雲端原生的應用程式。這項產品提供 Visual Studio Code 和 IntelliJ 等 IDE 的擴充功能，方便您在 Kubernetes 上針對程式碼快速進行疊代、偵錯及部署等作業。&lt;br&gt;&amp;nbsp;&lt;br&gt;Cloud Code 是基於 &lt;a href=&quot;https://github.com/GoogleContainerTools/skaffold&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GoogleContainerTools/skaffold: Easy and Repeatable Kubernetes Development&lt;/a&gt; 為基礎上再整合 Visual Studio Code 和 IntelliJ IDE, 讓開發者可以直接在 IDE 上就可以快速開發 Kubernetes 上的應用程式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本上來說 Cloud Code 給 Visual Studio Code 和 IntelliJ IDE 的 plugin 就是基於 skaffold 打造的(如下圖)，當你在 Visual Studio Code 執行(cmd+shift+p) &lt;code&gt;Cloud Code: Continues Deploy&lt;/code&gt; 的 log 就會知道&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/skaffold-go-debug-image-4.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://kaichu.io/tags/golang/"/>
    
      <category term="kubeneters" scheme="http://kaichu.io/tags/kubeneters/"/>
    
      <category term="skaffold" scheme="http://kaichu.io/tags/skaffold/"/>
    
      <category term="debug" scheme="http://kaichu.io/tags/debug/"/>
    
      <category term="vscode" scheme="http://kaichu.io/tags/vscode/"/>
    
      <category term="GoLand" scheme="http://kaichu.io/tags/GoLand/"/>
    
  </entry>
  
  <entry>
    <title>Global GDG Leaders Summit 2018 and Google I/O 2018 經驗分享</title>
    <link href="http://kaichu.io/2018/08/20/gdg-summit-2018-and-google-io-2018/"/>
    <id>http://kaichu.io/2018/08/20/gdg-summit-2018-and-google-io-2018/</id>
    <published>2018-08-20T02:53:15.000Z</published>
    <updated>2018-08-20T03:58:15.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>補作業</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQvBqMYvYRhwQBqcnr-gn__cwyvmsBInyHAANba7loo4NIsm_3W00-XkEK4-n5Vd0HgQ1P2RJcFIEeL/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><a id="more"></a><p>說了好久想去 Google I/O 終於在今年達成。第一次自費參加 Google I/O 之外，也以 <a href="http://GCPUG.TW" target="_blank" rel="noopener">GCPUG.TW</a> organizer 的身份參加了一前一天的 Global GDG Leaders Summit 2018<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label=" [Global GDG Leaders Summit - Home](https://events.withgoogle.com/gdg-global-summit/)">[1]</span></a></sup></p><h2 id="Global-GDG-Leaders-Summit"><a href="#Global-GDG-Leaders-Summit" class="headerlink" title="Global GDG Leaders Summit"></a>Global GDG Leaders Summit</h2><blockquote><p><code>534</code> GDG Leads. <code>91</code> Counties, <code>99</code> WTM Leads</p></blockquote><p>今年的 Global GDG Leaders Summit 2018 在 Google Event Center 舉辦，為期一天的活動有滿滿的 Sessions</p><ul><li>Growth</li><li>Collaboration</li><li>Devfest</li><li>Organizer Team</li><li>Culture</li><li>Event Management </li><li>Misc.</li></ul><p><img src="/img/gdg summit 2018 agenda.jpg" alt="gdg summit 2018 agenda"><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label=" Global GDG Leaders Summit 2018 agdenda ">[2]</span></a></sup></p><p>除了聽聽 Session 之外，最重要的部份就屬認識來自全球的其他 GDG 朋友 (加拿大、中國、香港、日本、澳洲、紐西蘭 etcs)。第三天晚上也參加了 Northeast Asia and Oceania Community Summit<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label=" NEAO Community Gathering">[3]</span></a></sup></p><h2 id="Google-I-O-2018"><a href="#Google-I-O-2018" class="headerlink" title="Google I/O 2018"></a>Google I/O 2018</h2><p>以往的 Google I/O Keynote 都只能在台灣熬夜觀看(台灣/加州時間15個小時)，這一次終於在現在聽 Pichai 開場(雖然是白天，身體實際上還是在熬夜 QQ)。為期3天的議程，因為算是 Google 一年一度的科技大拜拜，所以議程幾乎含括了所有的產品線，不過我大至上還是挑選跟 Cloud 及有興趣的主題來聽，另外現場還是有許多 Sandbox 可以參觀</p><ul><li>Google Assistant</li><li>Cloud Firebase / Flutter</li><li>Android / Android TV / Google Play / Wear OS by Google</li><li>Android Things / Nest</li><li>AR / VR</li><li>Design Accessibility</li><li>Web Payments</li><li>Experiments</li><li>AI / Machine Learning</li></ul><p><img src="https://lh3.googleusercontent.com/4bmuojgIaFUnyHGg4iyGk26jSg-nax-dxY1_hmdCgefJ4c24MyIpRJ-OJIofXA7XDNwai88ipwBdcwjN7PWHGQD1qldESYFRuy5kBS27P7J4-kOb_QxcT_e2wIjqpJtUL__SrjY3GJyO0el22__VKgtwTLzKhT5zrFe-9CuPHdOwMNCpCtZHXs9DyCCCvh1csji7wLyTwHfcJhOzBb1P2WUjQ6d8i8ei3Bj3B4mDtqdf7H5l11ghREyyAi-1v7GgbyMqsFSWHtahhPvMGVqgZwMjhd_GvGxUKgf_Sdqqsq0DbvjFXzk-gR7u_lVkXsITC5fboZhu84ggQYJ7har7KfF1Zpnn_ee4F_2Mz3Y3OQ6COhrVJzbY8oAeZ_Q4uiiVGqo9Zl7ahQcUi9TIr12816a4tk9RIj0ovaEz8Ewe3c3jWPhBQgj0vjIe2JhZ-cbLz-TmUxcxued0XN6JPZZq0J7TdQ-2gSkJrxze9f20Y26OL4XfkMpQGOVAlM1ht_yYFUzf1s-cK1GDDBHEJ6X9E1Jdltz1SUz-KobEY-yQZSCOA4Ph-337LPNYNUDeo-LyFQlvVedcf9aFmp7VbJ8DmqSvuf4eGwWPRv_mu-HK411jz7pLkgrWsWT3EQ_TvmH4M3mVbLZezaGrtDznVo01CpwP7ryE2yel=w443-h295-no" alt></p><p>Sandbox 只有現在才看的到，所以這種活動有時間還是要走完比較值得。影片都會有錄影，所以回來還是有機會可以看的。Google I/O Social 還是需要的啦，認識新朋友是一件很棒的事</p><p><img src="/img/google io 2018 keynote.jpg" alt></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://events.withgoogle.com/gdg-global-summit/" target="_blank" rel="noopener">Global GDG Leaders Summit - Home</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Global GDG Leaders Summit 2018 agdenda<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">NEAO Community Gathering<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://photos.google.com/share/AF1QipNiy_iO2xl_JD_xX9tK5XuHe8N0NGICExHjgAndEYqs9Gv0IQiy-UA6QL4-Xli3Lw?key=eWhkMUxoNGo3OVljMGVQRWxQWkIwZUpDeEx4Z0xR" target="_blank" rel="noopener">Google I/O 2018 - Google Photos</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://taiwan.googleblog.com/2018/05/2018-google-io-100.html" target="_blank" rel="noopener">Google台灣 - 官方部落格: 2018 Google I/O 發佈的100件事</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.youtube.com/playlist?list=PLIivdWyY5sqL-4yjTf-kPxPuJbceWKfwJ" target="_blank" rel="noopener">Google Cloud at I/O 2018 - YouTube</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://photos.google.com/share/AF1QipMctaetnI8BpZCga0pVyO4AhpeiqMwff61kUPJoF4FOUczu5DNZOZeDTx20CawTCw?key=dHZuMFV0Z012OVFYTWxiY241bHZXMDBPaTFRX0tR" target="_blank" rel="noopener">2018 Global GDG &amp; Community Groups Summit - Google Photos</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.youtube.com/playlist?list=PLOU2XLYxmsIInFRc3M44HUTQc3b_YJ4-Y" target="_blank" rel="noopener">Google I/O 2018 - All Sessions - YouTube</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://photos.google.com/share/AF1QipPbudc-VP718G-nq_AYjXOGVGxHwW0VEWTuMY_kD113ogIEwbwLOno7ydeO62jKSA?key=Q2ZRTWNOT2F2ZElmZ0hvRG1saV9ObVhEUDdURkRR" target="_blank" rel="noopener">NEAO Community Gathering - Google Photos</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;補作業&lt;/p&gt;
&lt;iframe src=&quot;https://docs.google.com/presentation/d/e/2PACX-1vQvBqMYvYRhwQBqcnr-gn__cwyvmsBInyHAANba7loo4NIsm_3W00-XkEK4-n5Vd0HgQ1P2RJcFIEeL/embed?start=false&amp;loop=false&amp;delayms=3000&quot; frameborder=&quot;0&quot; width=&quot;960&quot; height=&quot;569&quot; allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="Google" scheme="http://kaichu.io/tags/Google/"/>
    
      <category term="I/O" scheme="http://kaichu.io/tags/I-O/"/>
    
      <category term="2018" scheme="http://kaichu.io/tags/2018/"/>
    
      <category term="GDG" scheme="http://kaichu.io/tags/GDG/"/>
    
      <category term="summit" scheme="http://kaichu.io/tags/summit/"/>
    
  </entry>
  
  <entry>
    <title>workflow recipe -  Copy2ClipboardWithEasy</title>
    <link href="http://kaichu.io/2018/06/14/copy2clipboardwitheasy/"/>
    <id>http://kaichu.io/2018/06/14/copy2clipboardwitheasy/</id>
    <published>2018-06-14T15:23:04.000Z</published>
    <updated>2018-06-14T15:38:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="/img/ad1280x800.jpg" alt></p><p>小弟之前在在 Chrome Extension Store 上發佈了一個簡單的小工具 <a href="https://chrome.google.com/webstore/detail/copy-2-clipboard-with-eas/hiiobhaaokpmdmkkcaokdlanlemmcoah" target="_blank" rel="noopener">copy 2 clipboard with ease - Chrome Web Store</a> 可以快速的複製頁面的 titl/url</p><h2 id="iOS-WorkFlow"><a href="#iOS-WorkFlow" class="headerlink" title="iOS - WorkFlow"></a>iOS - WorkFlow</h2><blockquote><p>Workflows combine a bunch of steps across apps into a single tap. Collect workflows like these to save time and effort every day</p></blockquote><p>一個可以在 iOS 透過拖拖拉拉的方式進行有一點像寫程式的感覺來組合各種元件來達到一些特定的功能</p><h3 id="Copy2ClipboardWithEasy"><a href="#Copy2ClipboardWithEasy" class="headerlink" title="Copy2ClipboardWithEasy"></a>Copy2ClipboardWithEasy</h3><blockquote><p>類似 Chrome Extension - copy 2 clipboard with ease 的功能，可以在 iOS 中進行 url/title 的複製操作</p></blockquote><p><img src="/img/ios-workflow-1.PNG" alt><br><img src="/img/ios-workflow-2.PNG" alt></p><a id="more"></a><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>workflow : <a href="https://workflow.is/workflows/f7a238967381488d8ecf9328334e20c3" target="_blank" rel="noopener">Copy2ClipboardWithEasy</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://chrome.google.com/webstore/detail/copy-2-clipboard-with-eas/hiiobhaaokpmdmkkcaokdlanlemmcoah" target="_blank" rel="noopener">copy 2 clipboard with ease - Chrome Web Store</a></li><li><a href="https://workflow.is/workflows/f7a238967381488d8ecf9328334e20c3" target="_blank" rel="noopener">Copy2ClipboardWithEasy</a></li><li><a href="https://workflow.is/" target="_blank" rel="noopener">Workflow — Powerful automation made simple.</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/ad1280x800.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;小弟之前在在 Chrome Extension Store 上發佈了一個簡單的小工具 &lt;a href=&quot;https://chrome.google.com/webstore/detail/copy-2-clipboard-with-eas/hiiobhaaokpmdmkkcaokdlanlemmcoah&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;copy 2 clipboard with ease - Chrome Web Store&lt;/a&gt; 可以快速的複製頁面的 titl/url&lt;/p&gt;
&lt;h2 id=&quot;iOS-WorkFlow&quot;&gt;&lt;a href=&quot;#iOS-WorkFlow&quot; class=&quot;headerlink&quot; title=&quot;iOS - WorkFlow&quot;&gt;&lt;/a&gt;iOS - WorkFlow&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Workflows combine a bunch of steps across apps into a single tap. Collect workflows like these to save time and effort every day&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一個可以在 iOS 透過拖拖拉拉的方式進行有一點像寫程式的感覺來組合各種元件來達到一些特定的功能&lt;/p&gt;
&lt;h3 id=&quot;Copy2ClipboardWithEasy&quot;&gt;&lt;a href=&quot;#Copy2ClipboardWithEasy&quot; class=&quot;headerlink&quot; title=&quot;Copy2ClipboardWithEasy&quot;&gt;&lt;/a&gt;Copy2ClipboardWithEasy&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;類似 Chrome Extension - copy 2 clipboard with ease 的功能，可以在 iOS 中進行 url/title 的複製操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/ios-workflow-1.PNG&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;/img/ios-workflow-2.PNG&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://kaichu.io/tags/iOS/"/>
    
      <category term="workflow" scheme="http://kaichu.io/tags/workflow/"/>
    
      <category term="recipe" scheme="http://kaichu.io/tags/recipe/"/>
    
  </entry>
  
  <entry>
    <title>Screenshot as a Service</title>
    <link href="http://kaichu.io/2017/09/09/screenshot-as-a-service/"/>
    <id>http://kaichu.io/2017/09/09/screenshot-as-a-service/</id>
    <published>2017-09-08T16:23:00.000Z</published>
    <updated>2017-09-08T16:39:40.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://gcpugtw.kktix.cc/events/meetup201709" target="_blank" rel="noopener">GCPUG Taiwan Meetup #29</a> Screenshot as a service</p><blockquote><p><a href="https://github.com/cage1016/screenshot-as-a-service-demo" target="_blank" rel="noopener">cage1016/screenshot-as-a-service-demo: GCPUG Taiwan Meetup #29: screenshot as a service demo code</a></p></blockquote><iframe src="https://www.slideshare.net/slideshow/embed_code/key/o68LfhCpXHlFqz" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px"><a id="more"></a><h3 id="Waldo-gcp"><a href="#Waldo-gcp" class="headerlink" title="Waldo-gcp"></a>Waldo-gcp</h3><blockquote><p>一個基本 Google Map 上計算最佳路徑的實小服務</p></blockquote><p><img src="/img/screenshot-as-a-service-1.png" alt="waldo-gcp infrastructure"></p><p>當初會想弄一個 screenshot 的服務是因為 <a href="https://goo.gl/fnqLaZ" target="_blank" rel="noopener">slideshare: Waldo-gcp</a> 中會有擷圖的需求，且需要跟 GAE 進行整合，所以選擇了滿多人使用的 <a href="https://goo.gl/DT28P" target="_blank" rel="noopener">PhantomJS</a> 來實作擷圖的服務並使用 GAE flex runtime 的型式發佈到 GAE 平台上作為專案的 microservice 使用</p><h3 id="Phantomjs"><a href="#Phantomjs" class="headerlink" title="Phantomjs"></a>Phantomjs</h3><blockquote><p>PhantomJS is a headless WebKit scriptable with a JavaScript API. It has fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG.<br><a href="http://phantomjs.org/" target="_blank" rel="noopener">http://phantomjs.org/</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// yahoo.com.tw.js</span></span><br><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</span><br><span class="line">page.viewportSize = &#123; <span class="attr">width</span>: <span class="number">1440</span>, <span class="attr">height</span>: <span class="number">900</span> &#125;;</span><br><span class="line">page.clipRect = &#123; <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">width</span>: <span class="number">1440</span>, <span class="attr">height</span>: <span class="number">900</span> &#125;;</span><br><span class="line">page.open(<span class="string">'http://yahoo.com.tw'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  page.render(<span class="string">'yahoo.com.tw.png'</span>);</span><br><span class="line">  phantom.exit();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// execute</span></span><br><span class="line">$ phantomjs yahoo.com.tw.js</span><br></pre></td></tr></table></figure><h3 id="chromless"><a href="#chromless" class="headerlink" title="chromless"></a>chromless</h3><blockquote><p>Chrome automation made simple. Runs locally or headless on AWS Lambda.<br><a href="https://github.com/graphcool/chromeless" target="_blank" rel="noopener">https://github.com/graphcool/chromeless</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Chromeless &#125; = <span class="built_in">require</span>(<span class="string">'chromeless'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> chromeless = <span class="keyword">new</span> Chromeless()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> screenshot = <span class="keyword">await</span> chromeless</span><br><span class="line">    .goto(<span class="string">'https://www.google.com'</span>)</span><br><span class="line">    .type(<span class="string">'chromeless'</span>, <span class="string">'input[name="q"]'</span>)</span><br><span class="line">    .press(<span class="number">13</span>)</span><br><span class="line">    .wait(<span class="string">'#resultStats'</span>)</span><br><span class="line">    .screenshot()</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(screenshot) <span class="comment">// prints local file path or S3 url</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> chromeless.end()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run().catch(<span class="built_in">console</span>.error.bind(<span class="built_in">console</span>))</span><br></pre></td></tr></table></figure><h3 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">'https://www.google.com'</span>);</span><br><span class="line">  <span class="keyword">await</span> page.screenshot(&#123;<span class="attr">path</span>: <span class="string">'google.com.png'</span>&#125;);</span><br><span class="line"></span><br><span class="line">  browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>這兒舉三個簡單的例子來說明擷圖的技術，Phantomjs, Chromeless, puppeteer, 以前 Phantomjs 很熱門，不過最近 chromeless 等技術興起，也有友好的 API 可以給開發人員使用。<a href="https://goo.gl/cz4fSi" target="_blank" rel="noopener">GoogleChrome/puppeteer: Headless Chrome Node API</a> 更是提供高階 API 來操作 <a href="https://goo.gl/wg3u1W" target="_blank" rel="noopener">Headless</a> Chrome</p><h3 id="Screenshot-as-service-via-GAE-custom-runtime"><a href="#Screenshot-as-service-via-GAE-custom-runtime" class="headerlink" title="Screenshot as service via GAE custom runtime"></a>Screenshot as service via GAE custom runtime</h3><p><em>app.yaml</em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runtime:</span> <span class="string">custom</span></span><br><span class="line"><span class="attr">env:</span> <span class="string">flex</span></span><br><span class="line"><span class="attr">service:</span> <span class="string">screenshot</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">handlers:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">url:</span> <span class="string">/.*</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">app.js</span></span><br></pre></td></tr></table></figure><p>由於在兒我們使用的是包了 <a href="https://goo.gl/Ro4G" target="_blank" rel="noopener">Express</a> 及 <a href="http://phantomjs.org/" target="_blank" rel="noopener">PhantomJS</a> 的 custome runtime 來實作 GAE 版的 screenshot service, <code>yaml</code> 的重點便是指定 <code>runtime: custom</code>, <code>env: flex</code></p><p><em>dockerfile</em></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> launcher.gcr.io/google/debian8</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> DEBIAN_FRONTEND=noninteractive apt-get update -y &amp;&amp; apt-get install --no-install-recommends -y -q curl apt-utils build-essential ca-certificates libfreetype6 libfontconfig1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb http://http.debian.net/debian jessie-backports main"</span> &gt; /etc/apt/sources.list.d/backports.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get update -y &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get install -y --no-install-recommends fonts-noto fonts-noto-cjk locales-all &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get clean &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get autoclean &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get autoremove &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /nodejs &amp;&amp; curl http://nodejs.org/dist/v0.12.1/node-v0.12.1-linux-x64.tar.gz | tar xvzf - -C /nodejs --strip-components=1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:/nodejs/bin</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> package.json /app/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/nodejs/bin/npm"</span>, <span class="string">"start"</span>]</span></span><br></pre></td></tr></table></figure><p><code>DockerFile</code> 的重點則是準備好基本的 library 及 Express/Phantomjs 的配置。準備好 <code>DockerFile</code>，<code>app.yaml</code> 還有程式碼，就可以透過 <code>gcloud -q app deploy</code> 的指命將服務推到 GCP 上</p><p><img src="/img/screenshot-as-a-service-2.png" alt="waldo-gcp screenshot as a service"></p><blockquote><p><a href="https://waldo-gcp-testbed.appspot.com/screenshot/usage.html" target="_blank" rel="noopener">https://waldo-gcp-testbed.appspot.com/screenshot/usage.html</a></p></blockquote></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://gcpugtw.kktix.cc/events/meetup201709&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GCPUG Taiwan Meetup #29&lt;/a&gt; Screenshot as a service&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cage1016/screenshot-as-a-service-demo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cage1016/screenshot-as-a-service-demo: GCPUG Taiwan Meetup #29: screenshot as a service demo code&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

	&lt;iframe src=&quot;https://www.slideshare.net/slideshow/embed_code/key/o68LfhCpXHlFqz&quot; style=&quot;width:100%;height:550px&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt;
    
    </summary>
    
    
      <category term="GAE" scheme="http://kaichu.io/tags/GAE/"/>
    
      <category term="phantomjs" scheme="http://kaichu.io/tags/phantomjs/"/>
    
      <category term="chromeless" scheme="http://kaichu.io/tags/chromeless/"/>
    
      <category term="puppeteer" scheme="http://kaichu.io/tags/puppeteer/"/>
    
  </entry>
  
  <entry>
    <title>notebook - golang regexp</title>
    <link href="http://kaichu.io/2017/08/30/go-regex-notebook/"/>
    <id>http://kaichu.io/2017/08/30/go-regex-notebook/</id>
    <published>2017-08-30T13:41:49.000Z</published>
    <updated>2020-03-16T07:50:01.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="/img/go-regexp-notebook-1.png" alt="https://regex101.com/"></p><p>簡單記鎑一下最近在專案上需要利用 regex 來進行字串的拆解</p><a id="more"></a><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cfg:/etc/config/a.conf</span> <span class="string">=</span> <span class="number">0</span></span><br><span class="line"><span class="string">Build=20160331</span></span><br><span class="line"><span class="string">Version</span> <span class="string">=</span> <span class="number">2.2</span><span class="number">.13</span></span><br><span class="line"><span class="string">Date</span> <span class="string">=</span> <span class="number">2016</span><span class="number">-06</span><span class="number">-28</span></span><br><span class="line"><span class="string">RC_Number</span> <span class="string">=</span> <span class="number">181</span></span><br><span class="line"><span class="string">Enable=</span></span><br><span class="line"><span class="string">Status</span> <span class="string">=</span> <span class="string">complete</span></span><br><span class="line"><span class="string">ePassword</span> <span class="string">=</span> <span class="string">V2@W5Q9N91N4fXGEEyL+yXOlw==</span></span><br><span class="line"><span class="string">Server</span> <span class="string">Type</span> <span class="string">=</span> <span class="number">5</span></span><br><span class="line"><span class="string">Check</span> <span class="string">External</span> <span class="string">IP</span> <span class="string">=</span> <span class="number">10</span></span><br><span class="line"><span class="string">Enable</span> <span class="string">=</span> <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure><p>需要將將上述的 conf 拆分成 key, value，意外發現了一個很常好用的網站 <a href="https://regex101.com/" target="_blank" rel="noopener">Online regex tester and debugger: PHP, PCRE, Python, Golang and JavaScript</a>，可以很容易的在線上即時的進行測試，更棒的地方是他還是可以產出程式碼</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"regexp"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> re = regexp.MustCompile(<span class="string">`([^=]*)=(.*)`</span>)</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">`cfg:/etc/config/a.conf = 0</span></span><br><span class="line"><span class="string">Build=20160331</span></span><br><span class="line"><span class="string">Version = 2.2.13</span></span><br><span class="line"><span class="string">Date = 2016-06-28</span></span><br><span class="line"><span class="string">RC_Number = 181</span></span><br><span class="line"><span class="string">Enable=</span></span><br><span class="line"><span class="string">Status = complete</span></span><br><span class="line"><span class="string">ePassword = V2@W5Q9N91N4fXGEEyL+yXOlw==</span></span><br><span class="line"><span class="string">Server Type = 5</span></span><br><span class="line"><span class="string">Check External IP = 10</span></span><br><span class="line"><span class="string">Enable = TRUEÅ`</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i, match := <span class="keyword">range</span> re.FindAllString(str, <span class="number">-1</span>) &#123;</span><br><span class="line">        fmt.Println(match, <span class="string">"found at index"</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://github.com/StefanSchroeder/Golang-Regex-Tutorial" target="_blank" rel="noopener">StefanSchroeder/Golang-Regex-Tutorial: Golang - Regular Expression Tutorial</a></li><li><a href="http://www.cnblogs.com/golove/p/3269099.html" target="_blank" rel="noopener">基础知识 - Golang 中的正则表达式 - GoLove - 博客园</a></li><li><a href="https://regex101.com/" target="_blank" rel="noopener">Online regex tester and debugger: PHP, PCRE, Python, Golang and JavaScript</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/go-regexp-notebook-1.png&quot; alt=&quot;https://regex101.com/&quot;&gt;&lt;/p&gt;
&lt;p&gt;簡單記鎑一下最近在專案上需要利用 regex 來進行字串的拆解&lt;/p&gt;
    
    </summary>
    
    
      <category term="go" scheme="http://kaichu.io/tags/go/"/>
    
      <category term="regexp" scheme="http://kaichu.io/tags/regexp/"/>
    
  </entry>
  
  <entry>
    <title>CloudFunctions Google maps service</title>
    <link href="http://kaichu.io/2017/08/18/cloudfunctions-google-maps-services/"/>
    <id>http://kaichu.io/2017/08/18/cloudfunctions-google-maps-services/</id>
    <published>2017-08-17T16:42:29.000Z</published>
    <updated>2017-08-17T16:45:45.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Waldo-gcp"><a href="#Waldo-gcp" class="headerlink" title="Waldo-gcp"></a>Waldo-gcp</h3><p><a href="https://www.slideshare.net/cagechung/waldogcp" target="_blank" rel="noopener">Waldo-gcp</a> 在 2015 時 Google I/O Extended Taipei 時分享過一個計算最佳路徑的微服務。在提供幾組 Google Maps 上有效的地址，透過 Google Maps Distance Matrix API 來計算出每一個點一點之間的旅行距離及旅行時間。再透過基因演算出計算出周遊一圈旅行最短路徑</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提供5組 Google Maps 上有效的地址</span></span><br><span class="line"></span><br><span class="line">台北市內湖區瑞光路227號1樓,</span><br><span class="line">高雄市鼓山區美術東二路106號,</span><br><span class="line">台南市長榮路一段175號,</span><br><span class="line">臺北市松山區南京東路五段123巷1弄15號,</span><br><span class="line">高雄市五福四路131號2樓</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 透過 Google Maps Distance Matrix API 計算出  origin, destination, distance, duration</span></span><br><span class="line"></span><br><span class="line">台北市內湖區瑞光路227號1樓, 高雄市鼓山區美術東二路106號, 352777, 13532</span><br><span class="line">台北市內湖區瑞光路227號1樓, 台南市長榮路一段175號, 314041, 12166</span><br><span class="line">台北市內湖區瑞光路227號1樓, 臺北市松山區南京東路五段123巷1弄15號, 5167, 783</span><br><span class="line">台北市內湖區瑞光路227號1樓, 高雄市五福四路131號2樓, 356215, 14018</span><br><span class="line">高雄市鼓山區美術東二路106號, 台南市長榮路一段175號, 46668, 3203</span><br><span class="line">高雄市鼓山區美術東二路106號, 臺北市松山區南京東路五段123巷1弄15號, 355397, 14131</span><br><span class="line">高雄市鼓山區美術東二路106號, 高雄市五福四路131號2樓, 4166, 748</span><br><span class="line">台南市長榮路一段175號, 臺北市松山區南京東路五段123巷1弄15號, 314250, 12475</span><br><span class="line">台南市長榮路一段175號, 高雄市五福四路131號2樓, 49930, 3339</span><br><span class="line">臺北市松山區南京東路五段123巷1弄15號, 高雄市五福四路131號2樓, 359485, 14338</span><br></pre></td></tr></table></figure><p><img src="/img/cloudfunctions-google-maps-services-1.png" alt="waldo gcp Google I/O Extended Taipei"></p><h3 id="CloudFunctions-Google-maps-service"><a href="#CloudFunctions-Google-maps-service" class="headerlink" title="CloudFunctions Google maps service"></a>CloudFunctions Google maps service</h3><blockquote><p>Google Cloud Functions is a lightweight compute solution for developers to create single-purpose, stand-alone functions that respond to Cloud events without the need to manage a server or runtime environment - Google Cloud Functions Documentation</p></blockquote><p><a href="https://www.slideshare.net/cagechung/waldogcp" target="_blank" rel="noopener">Waldo-gcp</a> 微服務中透過 flex runtime GAE Python 中的 library(googlemaps) 來呼叫 Google Maps Distance Matrix API. Google Function 在這很適合取代原來 Python 版本的 Google Maps Distance Matrix API. </p><p>Cloud functions 可以建立 <code>Background Funtions</code>, <code>HTTP Functions</code> + <code>HTTP Triggers</code>, <code>Cloud Pub/Sub Triggers</code>, <code>Cloud Storage Triggers</code>, <code>Direct Triggers</code>. 所以我們可以建立一個可以執行 Google Maps Distance Matrix API 的 Cloud Functions, 透過起 <code>HTTP Triggers</code>, <code>Direct Triggers</code> 即可以建立計算旅行路徑的距離及時間</p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Github repo: <a href="https://github.com/cage1016/cloudfunctions-google-maps-services" target="_blank" rel="noopener">cage1016/cloudfunctions-google-maps-services</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clone repo</span></span><br><span class="line">$ git git@github.com:cage1016/cloudfunctions-google-maps-services.git &amp;&amp; <span class="built_in">cd</span> cloudfunctions-google-maps-services</span><br><span class="line"></span><br><span class="line"><span class="comment"># install node packages</span></span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>修改 <code>index.js</code> 中 API Key, <code>&lt;YOUR-GCP-API-KEY&gt;</code>, 並確保你的 GCP 專案有啟用 Google Maps Distance Matrix API</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> googleMapsClient = <span class="built_in">require</span>(<span class="string">'@google/maps'</span>).createClient(&#123;</span><br><span class="line">    key: <span class="string">'&lt;YOUR-GCP-API-KEY&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="distanceMatrix-background"><a href="#distanceMatrix-background" class="headerlink" title="distanceMatrix background"></a>distanceMatrix background</h3><blockquote><p>修改 <code>makefile</code> 中 <code>BUCKET=&lt;YOUR-GCS-BUCKET&gt;</code> Google Cloud Storage Bucket, Bucket 為 Cloud Functions 上傳的位置</p></blockquote><p>修改完依序執行即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># deploy distanceMatrix</span></span><br><span class="line">$ make deploy_backend</span><br><span class="line"></span><br><span class="line"><span class="comment"># call distanceMatrix</span></span><br><span class="line">$ make call_backend</span><br><span class="line"></span><br><span class="line"><span class="comment"># log distanceMatrix</span></span><br><span class="line">$ make log_backend</span><br><span class="line"></span><br><span class="line"><span class="comment"># show description of distanceMatrix function</span></span><br><span class="line">$ make describe_backend</span><br></pre></td></tr></table></figure><h3 id="distanceMatrix-background-1"><a href="#distanceMatrix-background-1" class="headerlink" title="distanceMatrix background"></a>distanceMatrix background</h3><blockquote><p>修改 <code>https://&lt;YOUR_REGION&gt;-&lt;YOUR_PROJECT_ID&gt;.cloudfunctions.net/distanceMatrixHttp</code> endpoint, endpoints 可由  <code>make deploy_http</code> 中得到</p></blockquote><p>修改完依序執行即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># deploy distanceMatrixHttp</span></span><br><span class="line">$ make deploy_http</span><br><span class="line"></span><br><span class="line"><span class="comment"># call distanceMatrixHttp</span></span><br><span class="line">$ make call_http</span><br><span class="line"></span><br><span class="line"><span class="comment"># log distanceMatrixHttp</span></span><br><span class="line">$ make log_http</span><br><span class="line"></span><br><span class="line"><span class="comment"># show description of distanceMatrixHttp function</span></span><br><span class="line">$ make describe_http</span><br></pre></td></tr></table></figure><h3 id="CloudFunctions"><a href="#CloudFunctions" class="headerlink" title="CloudFunctions"></a>CloudFunctions</h3><p><img src="/img/cloudfunctions-google-maps-services-2.png" alt="Cloud Functions"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/googlemaps/google-maps-services-js" target="_blank" rel="noopener">googlemaps/google-maps-services-js: Node.js client library for Google Maps API Web Services</a></li><li><a href="https://developers.google.com/maps/documentation/distance-matrix/intro?hl=en" target="_blank" rel="noopener">Developer’s Guide  |  Google Maps Distance Matrix API  |  Google Developers</a></li><li><a href="https://cloud.google.com/functions/docs/" target="_blank" rel="noopener">Google Cloud Functions Documentation  |  Cloud Functions  |  Google Cloud Platform</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Waldo-gcp&quot;&gt;&lt;a href=&quot;#Waldo-gcp&quot; class=&quot;headerlink&quot; title=&quot;Waldo-gcp&quot;&gt;&lt;/a&gt;Waldo-gcp&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/cagechung/waldogcp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Waldo-gcp&lt;/a&gt; 在 2015 時 Google I/O Extended Taipei 時分享過一個計算最佳路徑的微服務。在提供幾組 Google Maps 上有效的地址，透過 Google Maps Distance Matrix API 來計算出每一個點一點之間的旅行距離及旅行時間。再透過基因演算出計算出周遊一圈旅行最短路徑&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 提供5組 Google Maps 上有效的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;台北市內湖區瑞光路227號1樓,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;高雄市鼓山區美術東二路106號,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;台南市長榮路一段175號,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;臺北市松山區南京東路五段123巷1弄15號,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;高雄市五福四路131號2樓&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="cloudfunctions" scheme="http://kaichu.io/tags/cloudfunctions/"/>
    
      <category term="googlemaps" scheme="http://kaichu.io/tags/googlemaps/"/>
    
      <category term="GCP" scheme="http://kaichu.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>weddingcnp via GCP - 3. endpointAPI 設計實作</title>
    <link href="http://kaichu.io/2017/07/12/weddingcnp-via-gcp-3/"/>
    <id>http://kaichu.io/2017/07/12/weddingcnp-via-gcp-3/</id>
    <published>2017-07-12T14:51:05.000Z</published>
    <updated>2017-07-12T14:57:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>此篇就對 <a href="http://weddingcnp.appspot.com/" target="_blank" rel="noopener">Cage &amp; Ping wedding</a> 中實作專案中最為重要的 backend API (endpoint API) 部份進行簡單的說明，每一個 Google App Engine Service 實作的細節會在後序的篇幅中介紹</p><h4 id="weddingcnp-系例傳送門"><a href="#weddingcnp-系例傳送門" class="headerlink" title="weddingcnp 系例傳送門"></a>weddingcnp 系例傳送門</h4><ol><li><a href="https://kaichu.io/2017/06/08/weddingcnp-via-gcp/">weddingcnp via GCP 簡介</a></li><li><a href="https://kaichu.io/2017/06/12/weddingcnp-via-gcp-1/">weddingcnp via GCP - 1. 專案架構切分</a></li><li><a href="https://kaichu.io/2017/06/18/weddingcnp-via-gcp-2/">weddingcnp via GCP - 2. 前端頁面設計實作</a></li><li><a href="https://kaichu.io/2017/07/12/weddingcnp-via-gcp-3/">weddingcnp via GCP - 3. endpointAPI 設計實作</a></li><li>weddingcnp 前端 vue.js 設計實作</li><li>weddingcnp edm 寄送 sendgrid</li></ol><h4 id="endpointAPI-設計實作"><a href="#endpointAPI-設計實作" class="headerlink" title="endpointAPI 設計實作"></a>endpointAPI 設計實作</h4><p><img src="/img/weddingcnp-via-gpc-3_1.png" alt="weddingcnp endpointAPI"> 圖一</p><p><img src="/img/weddingcnp-via-gpc-3_2.png" alt="weddingcnp endpointAPI curl"> 圖二</p><p><a href="http://weddingcnp.appspot.com/" target="_blank" rel="noopener">Cage &amp; Ping wedding</a> 的網站大至上可以區分為靜態頁面(frontend Service, Golang) 及負責資料收集的 API (endpoints Service, Python). Google <a href="https://cloud.google.com/endpoints/docs/frameworks/legacy/v1/python/create_api" target="_blank" rel="noopener">Endpoints API</a><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Endpoints API 2.0 的版本已經出來了，相較於 1.0 改變滿大的，原先像 Google API explorer 的部份由 swagger 取代，詳細的說明請見官網">[1]</span></a></sup> 是架構在 GAE 上的一個 RPC (remote procedure call) 服務。由於 endpoints API 是基於 <a href="https://cloud.google.com/appengine/docs/standard/python/tools/protorpc/" target="_blank" rel="noopener">ProtoRPC remote.Service</a> 實作出來的，所以在實作我們的方法時也是依照 protorpc 的方式來定義，小弟在寫 <a href="http://weddingcnp.appspot.com/" target="_blank" rel="noopener">Cage &amp; Ping wedding</a> 這一個網站的時候 Endpoints API 還是 1.0，所以這篇文章還是以 Endpoints API 1.0 來說明</p><a id="more"></a><h3 id="endpoint-API-demo-project"><a href="#endpoint-API-demo-project" class="headerlink" title="endpoint API demo project"></a>endpoint API demo project</h3><p>小弟我建立一個比較簡單的範例來說明</p><p><a href="https://github.com/cage1016/endpoint-api-demo" target="_blank" rel="noopener">https://github.com/cage1016/endpoint-api-demo</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git clone repo</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:cage1016/endpoint-api-demo.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># install GAE python requirement packages</span></span><br><span class="line">$ pip install -r requirements.txt -t lib</span><br><span class="line">Collecting arrow==0.8.0 (from -r requirements.txt (line 1))</span><br><span class="line">Collecting python-dateutil (from arrow==0.8.0-&gt;-r requirements.txt (line 1))</span><br><span class="line">  Downloading python_dateutil-2.6.1-py2.py3-none-any.whl (194kB)</span><br><span class="line">    100% |████████████████████████████████| 194kB 1.2MB/s</span><br><span class="line">Collecting six&gt;=1.5 (from python-dateutil-&gt;arrow==0.8.0-&gt;-r requirements.txt (line 1))</span><br><span class="line">  Using cached six-1.10.0-py2.py3-none-any.whl</span><br><span class="line">Installing collected packages: six, python-dateutil, arrow</span><br><span class="line">Successfully installed arrow python-dateutil-2.2 six-1.10.0</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># run GAE python locally</span></span><br><span class="line">$ dev_appserver.py app.yaml</span><br><span class="line">INFO     2017-07-12 13:30:19,063 devappserver2.py:116] Skipping SDK update check.</span><br><span class="line">INFO     2017-07-12 13:30:19,706 api_server.py:312] Starting API server at: http://localhost:51100</span><br><span class="line">INFO     2017-07-12 13:30:19,710 dispatcher.py:226] Starting module <span class="string">"default"</span> running at: http://localhost:8080</span><br><span class="line">INFO     2017-07-12 13:30:19,711 admin_server.py:116] Starting admin server at: http://localhost:8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># visit http://localhost:8080</span></span><br></pre></td></tr></table></figure><p>完全上述步驟後透過瀏覽器訪問 <code>http://localhost:8080/_ah/api/explorer</code> 就可以得到圖一中類似 <a href="https://developers.google.com/apis-explorer/#p/" target="_blank" rel="noopener">Google API explorer</a> 風格的本地測試頁面, 這是一個非常方便的工具，可以讓自己在本地透過瀏覽器直接操作自己定義的 endpointAPI</p><p><img src="/img/weddingcnp-via-gpc-3_3.png" alt="endpoint-api-demo"></p><h4 id="專案架構"><a href="#專案架構" class="headerlink" title="專案架構"></a>專案架構</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── apis                   // endpoint api packages</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── books.py</span><br><span class="line">├── lib</span><br><span class="line">├── app.py                 // 主程式進入點</span><br><span class="line">├── app.yaml               // GAE 配置檔</span><br><span class="line">├── appengine_config.py    // lib 載入配置</span><br><span class="line">├── models.py              // GAE Datastore 檔</span><br><span class="line">├── requirements.txt       // GAE python 引用資源庫</span><br><span class="line">├── settings.py            // 專案設定檔</span><br><span class="line">└── utils.py               // helpers function</span><br></pre></td></tr></table></figure><p>一個 GAE endpoint API Service 大至上進行簡單的配置可以執行了</p><p><strong>app.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module:</span> <span class="string">default</span></span><br><span class="line"></span><br><span class="line"><span class="attr">runtime:</span> <span class="string">python27</span></span><br><span class="line"><span class="attr">api_version:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">threadsafe:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="attr">handlers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">url:</span> <span class="string">/_ah/spi/.*</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">app.API</span></span><br><span class="line">  <span class="attr">secure:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">libraries:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">endpoints</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">latest</span></span><br></pre></td></tr></table></figure><p><strong>app.yaml</strong> 配置上的重點為在 handlers 區塊加入 <code>/_ah/spi/.*</code> 這一個 route 並將 route 導至 endpoints API server</p><p><strong>app.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> endpoints</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> apis <span class="keyword">import</span> books</span><br><span class="line"></span><br><span class="line">API = endpoints.api_server([</span><br><span class="line">    books.BooksAPI</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>endpoints api server 由 <code>endpoints.api_server([])</code> 建立, 其中的參數是實作 <code>protorpc.remote.Service</code> 類別的 API, 目前我們只有實作一個 <code>books.BooksAPI</code> 所以只有填入一個</p><p><strong>settings.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">books_api = endpoints.api(name=<span class="string">'dummy'</span>,</span><br><span class="line">                         version=<span class="string">'v1'</span>,</span><br><span class="line">                         description=<span class="string">'dummy API'</span>,</span><br><span class="line">                         allowed_client_ids=[CLIENT_ID,</span><br><span class="line">                                             endpoints.API_EXPLORER_CLIENT_ID],</span><br><span class="line">                         scopes=[endpoints.EMAIL_SCOPE])</span><br></pre></td></tr></table></figure><p>在我們定義的 <code>protorpc.remote.Service</code> API 上加一個 Decorate<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="在定義 API 說明時有二種方式。這邊採用的是 `@books_api.api_class`，在 `books_api` 下允許定義多組 RESTful resource">[2]</span></a></sup> 來描述我們的 API(API 名稱、版號、說明、允許呼叫的 GCP CLIENT_ID, scopes 等等)</p><blockquote><p>@util.positional(2)<br>def api(name, version, description=None, hostname=None, audiences=None,<br>        scopes=None, allowed_client_ids=None, canonical_name=None,<br>        auth=None, owner_domain=None, owner_name=None, package_path=None,<br>        frontend_limits=None, title=None, documentation=None, auth_level=None):</p></blockquote><p><strong>api/books.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@books_api.api_class(resource_name="books")</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksAPI</span><span class="params">(remote.Service)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  Books API</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line"></span><br><span class="line"><span class="meta">  @endpoints.method(BOOKS_LIST_RESOURCE, BookForms, path="books",</span></span><br><span class="line">                    http_method=<span class="string">"GET"</span>, name=<span class="string">"list"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">listBooks</span><span class="params">(self, request)</span>:</span></span><br><span class="line">      <span class="string">"""List books"""</span></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line"><span class="meta">  @endpoints.method(BOOKS_CREATE_RESOURCE, BookForm, path="books",</span></span><br><span class="line">                    http_method=<span class="string">"POST"</span>, name=<span class="string">"post"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">addBook</span><span class="params">(self, request)</span>:</span></span><br><span class="line">      <span class="string">"""Add books"""</span></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line"><span class="meta">  @endpoints.method(BOOKS_DELETE_RESOURCE, BooleanMessage, path="books/&#123;websafeKey&#125;",</span></span><br><span class="line">                    http_method=<span class="string">"DELETE"</span>, name=<span class="string">"delete"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">deleteBook</span><span class="params">(self, request)</span>:</span></span><br><span class="line">      <span class="string">"""Delete book"""</span></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line"><span class="meta">  @endpoints.method(BOOKS_UPDATE_RESOURCE, BookForm, path="books/&#123;websafeKey&#125;",</span></span><br><span class="line">                    http_method=<span class="string">"PUT"</span>, name=<span class="string">"put"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">updateBook</span><span class="params">(self, request)</span>:</span></span><br><span class="line">      <span class="string">"""Update book"""</span></span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><p>在定義 resource 下的方法時依然使用 Decorate 的方式來對方法進行設置 (method name, path, http method,<br>  cache control, scopes, audiences, client ids and auth_level 等)</p><blockquote><p>@util.positional(2)<br>def method(request_message=message_types.VoidMessage,<br>           response_message=message_types.VoidMessage,<br>           name=None,<br>           path=None,<br>           http_method=’POST’,<br>           cache_control=None,<br>           scopes=None,<br>           audiences=None,<br>           allowed_client_ids=None,<br>           auth_level=None):</p></blockquote><p>設置完 endpointAPI 的基本架構，剩下的部份就是 GAE Python<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[go-endpoints](https://github.com/GoogleCloudPlatform/go-endpoints) 其實 go 版的寫法更為簡潔一點">[3]</span></a></sup> 的基本操作，定義 Datastore module、對 Datastore 進行 CRUD 的操作。有興趣的朋友可以把專案 clone 下來玩看看，並試著自己俢改修改會更有感覺。</p><p>endpointAPI 其他的功能還有很多，可以搭配 gRPC<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[gRPC API Service](https://cloud.google.com/endpoints/docs/grpc-service-config)">[4]</span></a></sup>一起使用、建立 Android/iOS 的 frameworks<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Cloud Endpoints Frameworks for App Engine](https://cloud.google.com/endpoints/docs/frameworks/java/about-cloud-endpoints-frameworks)">[5]</span></a></sup> 等，詳細的說明可以見官方的文件 <a href="https://cloud.google.com/endpoints/docs/how-to" target="_blank" rel="noopener">How-to Guides</a></p><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p>透過瀏覽器操作過後，透過 curl 操作的結果也是一樣的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost:8080/_ah/api/dummy/v1/books</span><br><span class="line">&#123;</span><br><span class="line"> &quot;items&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">   &quot;name&quot;: &quot;Shel Silverstein&quot;,</span><br><span class="line">   &quot;title&quot;: &quot;The Giving Tree&quot;,</span><br><span class="line">   &quot;websafeKey&quot;: &quot;aghkZXZ-Tm9uZXIZCxIEQm9vayIPVGhlIEdpdmluZyBUcmVlDA&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   &quot;name&quot;: &quot;Harper Lee&quot;,</span><br><span class="line">   &quot;title&quot;: &quot;To Kill a Mockingbird&quot;,</span><br><span class="line">   &quot;websafeKey&quot;: &quot;aghkZXZ-Tm9uZXIfCxIEQm9vayIVVG8gS2lsbCBhIE1vY2tpbmdiaXJkDA&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   &quot;name&quot;: &quot;dfad&quot;,</span><br><span class="line">   &quot;title&quot;: &quot;fdafd&quot;,</span><br><span class="line">   &quot;websafeKey&quot;: &quot;aghkZXZ-Tm9uZXIPCxIEQm9vayIFZmRhZmQM&quot;</span><br><span class="line">  &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Endpoints API 2.0 的版本已經出來了，相較於 1.0 改變滿大的，原先像 Google API explorer 的部份由 swagger 取代，詳細的說明請見官網<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">在定義 API 說明時有二種方式。這邊採用的是 <code>@books_api.api_class</code>，在 <code>books_api</code> 下允許定義多組 RESTful resource<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/GoogleCloudPlatform/go-endpoints" target="_blank" rel="noopener">go-endpoints</a> 其實 go 版的寫法更為簡潔一點<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://cloud.google.com/endpoints/docs/grpc-service-config" target="_blank" rel="noopener">gRPC API Service</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://cloud.google.com/endpoints/docs/frameworks/java/about-cloud-endpoints-frameworks" target="_blank" rel="noopener">Cloud Endpoints Frameworks for App Engine</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇就對 &lt;a href=&quot;http://weddingcnp.appspot.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cage &amp;amp; Ping wedding&lt;/a&gt; 中實作專案中最為重要的 backend API (endpoint API) 部份進行簡單的說明，每一個 Google App Engine Service 實作的細節會在後序的篇幅中介紹&lt;/p&gt;
&lt;h4 id=&quot;weddingcnp-系例傳送門&quot;&gt;&lt;a href=&quot;#weddingcnp-系例傳送門&quot; class=&quot;headerlink&quot; title=&quot;weddingcnp 系例傳送門&quot;&gt;&lt;/a&gt;weddingcnp 系例傳送門&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://kaichu.io/2017/06/08/weddingcnp-via-gcp/&quot;&gt;weddingcnp via GCP 簡介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kaichu.io/2017/06/12/weddingcnp-via-gcp-1/&quot;&gt;weddingcnp via GCP - 1. 專案架構切分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kaichu.io/2017/06/18/weddingcnp-via-gcp-2/&quot;&gt;weddingcnp via GCP - 2. 前端頁面設計實作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kaichu.io/2017/07/12/weddingcnp-via-gcp-3/&quot;&gt;weddingcnp via GCP - 3. endpointAPI 設計實作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;weddingcnp 前端 vue.js 設計實作&lt;/li&gt;
&lt;li&gt;weddingcnp edm 寄送 sendgrid&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;endpointAPI-設計實作&quot;&gt;&lt;a href=&quot;#endpointAPI-設計實作&quot; class=&quot;headerlink&quot; title=&quot;endpointAPI 設計實作&quot;&gt;&lt;/a&gt;endpointAPI 設計實作&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/img/weddingcnp-via-gpc-3_1.png&quot; alt=&quot;weddingcnp endpointAPI&quot;&gt; 圖一&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/weddingcnp-via-gpc-3_2.png&quot; alt=&quot;weddingcnp endpointAPI curl&quot;&gt; 圖二&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://weddingcnp.appspot.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cage &amp;amp; Ping wedding&lt;/a&gt; 的網站大至上可以區分為靜態頁面(frontend Service, Golang) 及負責資料收集的 API (endpoints Service, Python). Google &lt;a href=&quot;https://cloud.google.com/endpoints/docs/frameworks/legacy/v1/python/create_api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Endpoints API&lt;/a&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--error hint--medium hint--rounded hint--bounce&quot; aria-label=&quot;Endpoints API 2.0 的版本已經出來了，相較於 1.0 改變滿大的，原先像 Google API explorer 的部份由 swagger 取代，詳細的說明請見官網
&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt; 是架構在 GAE 上的一個 RPC (remote procedure call) 服務。由於 endpoints API 是基於 &lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/python/tools/protorpc/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ProtoRPC remote.Service&lt;/a&gt; 實作出來的，所以在實作我們的方法時也是依照 protorpc 的方式來定義，小弟在寫 &lt;a href=&quot;http://weddingcnp.appspot.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cage &amp;amp; Ping wedding&lt;/a&gt; 這一個網站的時候 Endpoints API 還是 1.0，所以這篇文章還是以 Endpoints API 1.0 來說明&lt;/p&gt;
    
    </summary>
    
    
      <category term="GAE" scheme="http://kaichu.io/tags/GAE/"/>
    
      <category term="GCE" scheme="http://kaichu.io/tags/GCE/"/>
    
      <category term="Datastore" scheme="http://kaichu.io/tags/Datastore/"/>
    
      <category term="EndpointAPI" scheme="http://kaichu.io/tags/EndpointAPI/"/>
    
      <category term="sendgrid" scheme="http://kaichu.io/tags/sendgrid/"/>
    
      <category term="API" scheme="http://kaichu.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>weddingcnp via GCP - 2. 前端頁面設計實作</title>
    <link href="http://kaichu.io/2017/06/18/weddingcnp-via-gcp-2/"/>
    <id>http://kaichu.io/2017/06/18/weddingcnp-via-gcp-2/</id>
    <published>2017-06-18T13:02:54.000Z</published>
    <updated>2017-07-12T14:57:14.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>此篇就對 <a href="http://weddingcnp.appspot.com/" target="_blank" rel="noopener">Cage &amp; Ping wedding</a> frontend Service 使用了 GAE standard runtime 搭配 echo 網頁框架實作介紹</p><h4 id="weddingcnp-系例傳送門"><a href="#weddingcnp-系例傳送門" class="headerlink" title="weddingcnp 系例傳送門"></a>weddingcnp 系例傳送門</h4><ol><li><a href="https://kaichu.io/2017/06/08/weddingcnp-via-gcp/">weddingcnp via GCP 簡介</a></li><li><a href="https://kaichu.io/2017/06/12/weddingcnp-via-gcp-1/">weddingcnp via GCP - 1. 專案架構切分</a></li><li><a href="https://kaichu.io/2017/06/18/weddingcnp-via-gcp-2/">weddingcnp via GCP - 2. 前端頁面設計實作</a></li><li><a href="https://kaichu.io/2017/07/12/weddingcnp-via-gcp-3/">weddingcnp via GCP - 3. endpointAPI 設計實作</a></li><li>weddingcnp 前端 vue.js 設計實作</li><li>weddingcnp edm 寄送 sendgrid</li></ol><h4 id="weddingcnp-前端頁面設計實作"><a href="#weddingcnp-前端頁面設計實作" class="headerlink" title="weddingcnp 前端頁面設計實作"></a>weddingcnp 前端頁面設計實作</h4><p><a href="http://weddingcnp.appspot.com/" target="_blank" rel="noopener">Cage &amp; Ping wedding</a> <strong>frontend Service(Module)</strong> 主要的功能如下</p><ul><li>serve 靜態資源(audio、js、images、css)，serve 動態資源(婚紗照片由 Google Cloud Storage 提供)</li><li>服務整個主體的網站架構中模版<ul><li><a href="https://weddingcnp.appspot.com/" target="_blank" rel="noopener">首頁介紹頁</a></li><li><a href="https://weddingcnp.appspot.com/gallery" target="_blank" rel="noopener">婚妙相簿頁</a></li><li>婚宴地點介紹引導頁(<a href="https://weddingcnp.appspot.com/luzhu" target="_blank" rel="noopener">訂婚</a>、<a href="https://weddingcnp.appspot.com/chiayi" target="_blank" rel="noopener">結婚</a>)</li><li><a href="https://weddingcnp.appspot.com/rsvp" target="_blank" rel="noopener">報名頁面</a>(我要參加)<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="報名頁面實作細節會再後序的篇幅說明">[1]</span></a></sup></li><li><a href="https://weddingcnp.appspot.com/greeting" target="_blank" rel="noopener">隱藏網頁</a>(求婚影片搶先看)，連結由喜帖中的 QR code 提供</li><li><a href="https://weddingcnp.appspot.com/bingo" target="_blank" rel="noopener">bingo 遊戲</a></li></ul></li></ul><p><img src="/img/weddingcnp-via-gpc-2_1.png" alt="weddingcnp frontend service"></p><p><strong>frontend Service</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── public                // static resource</span><br><span class="line">│   ├── audio</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── images</span><br><span class="line">│   └── js</span><br><span class="line">├── templates             // html templates</span><br><span class="line">│   ├── bingo.tmpl        // bingo game</span><br><span class="line">│   ├── chiayi.tmpl       // 地點引導</span><br><span class="line">│   ├── gallery.tmpl      // 婚紗相簿</span><br><span class="line">│   ├── greeting.tmpl     // 隱藏網頁，連結由喜帖中的 QR code 提供</span><br><span class="line">│   ├── index.tmpl</span><br><span class="line">│   ├── layout.tmpl</span><br><span class="line">│   ├── live.tmpl</span><br><span class="line">│   ├── luzhu.tmpl        // 地點引導</span><br><span class="line">│   └── rsvp.tmpl         // 報名頁面</span><br><span class="line">├── app-engine.go</span><br><span class="line">├── app-standalone.go     // Google App Engine entry point</span><br><span class="line">├── app.go</span><br><span class="line">├── app.yaml              // frontend services yaml</span><br><span class="line">├── index.yaml            // index <span class="keyword">for</span> Datastore</span><br><span class="line">└── main.go               // <span class="built_in">echo</span> framework entry point</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Google-App-Engine-Basic"><a href="#Google-App-Engine-Basic" class="headerlink" title="Google App Engine Basic"></a>Google App Engine Basic</h2><p><a href="https://cloud.google.com/appengine/docs" target="_blank" rel="noopener">Google App Engine</a> 現在有提供 <strong>Standard</strong> 及 <strong>Flexible</strong> 的版本</p><p><a href="https://cloud.google.com/appengine/docs/standard/" target="_blank" rel="noopener">Standard</a>:</p><ul><li>Python 2.7</li><li>Java 7</li><li>PHP 5.5</li><li>Go 1.6<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Google App Engine **Standard** 支援 1.8 的版本應該快了(1.9 Beta 都出來了 XD)">[3]</span></a></sup></li></ul><p><a href="https://cloud.google.com/appengine/docs/flexible/" target="_blank" rel="noopener">Flexible</a>:</p><ul><li>Python 2.7/3.5</li><li>Java 8</li><li>Node.js</li><li>Go 1.8</li><li>Ruby</li><li>PHP 5,6,7</li><li>.Net</li><li>Custom Runtimes</li></ul><p>二者最大的差異是 <strong>Standard</strong> runtime 為 Google Fully management，所以享有每天 <strong>28</strong> instance FREE 的配額<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Google App Engine **Standard** 享有一些免費的配額，細項請看 [Quotas](https://cloud.google.com/appengine/quotas)">[4]</span></a></sup>，<strong>Flexible</strong> runtime 是以 GCE 的 instance 來跑，所以基本上的計價方式就是以 GCE 的計算方式，以分計費(最少收 10 分鐘的錢)，且因為是 GCE 的方式來跑，因此彈性上就會比 <strong>Standard</strong> runtime 的來的大，不過缺點就是一開機器就開始算錢惹。在 weddingcnp 專案一開始就希望能夠少花一點錢，評估上 <strong>Standard</strong> runtime 就已經滿足需求</p><p><a href="http://weddingcnp.appspot.com/" target="_blank" rel="noopener">Cage &amp; Ping wedding</a> <strong>frontend Service(Module)</strong> 選擇使用了 <strong>Standard</strong> runtime 中 <code>Go</code> 語言的實作方式。由於前端需求並不複雜且 <code>Go</code> 實作的方式要比 <code>Python</code> 來的簡潔，部署至 Google App Engine 上的專案大小、記憶體的表現都上 <code>Go</code> 的表現要來的比 <code>Python</code> 來的要好，因此選擇了 <code>Go</code> 來實作。</p><blockquote><p>各位朋友就端看自己的需求來評估要使用那一種 runtime</p></blockquote><h2 id="Google-App-Engine-hello-example"><a href="#Google-App-Engine-hello-example" class="headerlink" title="Google App Engine: hello example"></a>Google App Engine: hello example</h2><p><strong>app.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runtime:</span> <span class="string">go</span></span><br><span class="line"><span class="attr">api_version:</span> <span class="string">go1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">handlers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">url:</span> <span class="string">/.*</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">_go_app</span></span><br></pre></td></tr></table></figure><p><strong>hello.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/"</span>, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprint(w, <span class="string">"Hello, world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start GAE server</span></span><br><span class="line">$ dev_appserver.py app.yaml</span><br><span class="line">INFO     2017-06-18 04:02:36,963 devappserver2.py:692] Skipping SDK update check.</span><br><span class="line">INFO     2017-06-18 04:02:37,519 api_server.py:272] Starting API server at: http://localhost:54584</span><br><span class="line">INFO     2017-06-18 04:02:37,522 dispatcher.py:205] Starting module <span class="string">"default"</span> running at: http://localhost:8080</span><br><span class="line">INFO     2017-06-18 04:02:37,524 admin_server.py:116] Starting admin server at: http://localhost:8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># fetch</span></span><br><span class="line">$ curl http://localhost:8080</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><h2 id="Weddingcnp-frontend"><a href="#Weddingcnp-frontend" class="headerlink" title="Weddingcnp frontend"></a>Weddingcnp frontend</h2><p><code>Go</code> 由語言中原生就有提供 <code>net/http</code> 的 package 可以使用，所以可以很輕易的建立一個 Google App Engine <code>Go</code> <strong>Standard</strong> 的應用程式，不過 Google App Engine 還是可以搭配使用其他的網頁框架: <a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">gin-gonic/gin</a>、<a href="https://github.com/labstack/echo" target="_blank" rel="noopener">echo</a> 等，weddingcnp 使用了 <code>echo</code> 這一套輕量的網頁框架</p><p>Google App Engine <strong>Standard</strong> 是由 Google fully management，因此在使用 echo 框架<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Google App Engine Recipe | Echo - High performance, minimalist Go web framework](https://echo.labstack.com/cookbook/google-app-engine#standalone), 由於 GAE 目前只有支持 Go 1.6，且 Go 1.7 以後將 `context` 改為內建 package，一些依賴的 package 也跟著升級了，所以目前建議使用 **Flexible** 會比較簡單">[5]</span></a></sup>需要特別的的調整一下</p><p><strong>app-engin.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build appengine</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/labstack/echo"</span></span><br><span class="line">    <span class="string">"github.com/labstack/echo/engine/standard"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createMux</span><span class="params">()</span> *<span class="title">echo</span>.<span class="title">Echo</span></span> &#123;</span><br><span class="line">    e := echo.New()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// note: we don't need to provide the middleware or static handlers, that's taken care of by the platform</span></span><br><span class="line">    <span class="comment">// app engine has it's own "main" wrapper - we just need to hook echo into the default handler</span></span><br><span class="line">    s := standard.New(<span class="string">""</span>)</span><br><span class="line">    s.SetHandler(e)</span><br><span class="line">    http.Handle(<span class="string">"/"</span>, s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>app-standalone.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build !appengine,!appenginevm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line"><span class="string">"github.com/labstack/echo/engine/standard"</span></span><br><span class="line"><span class="string">"github.com/labstack/echo/middleware"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createMux</span><span class="params">()</span> *<span class="title">echo</span>.<span class="title">Echo</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line"></span><br><span class="line">e.Use(middleware.Recover())</span><br><span class="line">e.Use(middleware.Logger())</span><br><span class="line">e.Use(middleware.Gzip())</span><br><span class="line"></span><br><span class="line">e.Use(middleware.Static(<span class="string">"public"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e.Run(standard.New(<span class="string">":8080"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>app.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// reference our echo instance and create it early</span></span><br><span class="line"><span class="keyword">var</span> e = createMux()</span><br></pre></td></tr></table></figure><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RSVP page</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rsvpGET</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p = &amp;Page&#123;&#125;</span><br><span class="line">p.Name = <span class="string">"slider-title-page"</span></span><br><span class="line">p.MenuIconWhite = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">r.HTML(c.Response().(*standard.Response).ResponseWriter, http.StatusOK, <span class="string">"rsvp"</span>, p)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">e.GET(<span class="string">"/"</span>, indexGET)</span><br><span class="line">e.GET(<span class="string">"/gallery"</span>, galleryGET)</span><br><span class="line">e.GET(<span class="string">"/chiayi"</span>, chiayiGET)</span><br><span class="line">e.GET(<span class="string">"/luzhu"</span>, luzhuGET)</span><br><span class="line">e.GET(<span class="string">"/rsvp"</span>, rsvpGET)</span><br><span class="line">e.GET(<span class="string">"/greeting"</span>, greetingGET)</span><br><span class="line">e.GET(<span class="string">"/live"</span>, liveGET)</span><br><span class="line">e.GET(<span class="string">"/bingo"</span>, bingoGet)</span><br><span class="line">e.GET(<span class="string">"/img"</span>, imgServe)</span><br><span class="line"></span><br><span class="line">e.SetHTTPErrorHandler(ErrorHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過 <code>app-engine.go</code>、<code>app-standalone.go</code>、<code>app.go</code>、<code>main.go</code> 的調整，就可以在 Google App Engine <strong>Standard</strong> runtime 上使用 <code>echo</code> 框架(不過僅限 Go 1.6)。在頁面 Render 的部份則是使用 <code>github.com/unrolled/render</code> 模版系統來建置。相簿的照片是放在 Google Cloud Storage 透過 Image API 來取存<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[GAE go Image API for GCS · Kaichu.io](http://localhost:4000/2016/10/31/gae-go-image-api/)">[2]</span></a></sup>，大至上都是很單純的頁面</p><p><img src="/img/weddingcnp-via-gpc-2_2.png" alt="Google Cloud Storage: album"></p><p>此篇大至上說明 <a href="http://weddingcnp.appspot.com/" target="_blank" rel="noopener">Cage &amp; Ping wedding</a> <strong>frontend Service(Module)</strong> 實作的方式。比較可惜的是目前 <code>Go</code> 主要的版本已經到 1.8.3, 1.9 Beta 也公佈了，而 Google App Engine <strong>Standard</strong> runtime 只有支援 <code>Go</code> 1.6 (1.8 應該快要支援), 當 Google App Engine <strong>Standard</strong> runtime 支援 <code>Go</code> 1.8 時才會有比較多的框架來搭配，目前就使用容易性來說還是 <strong>Flexible</strong> runtime 較好</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">報名頁面實作細節會再後序的篇幅說明<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://localhost:4000/2016/10/31/gae-go-image-api/" target="_blank" rel="noopener">GAE go Image API for GCS · Kaichu.io</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Google App Engine <strong>Standard</strong> 支援 1.8 的版本應該快了(1.9 Beta 都出來了 XD)<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Google App Engine <strong>Standard</strong> 享有一些免費的配額，細項請看 <a href="https://cloud.google.com/appengine/quotas" target="_blank" rel="noopener">Quotas</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://echo.labstack.com/cookbook/google-app-engine#standalone" target="_blank" rel="noopener">Google App Engine Recipe | Echo - High performance, minimalist Go web framework</a>, 由於 GAE 目前只有支持 Go 1.6，且 Go 1.7 以後將 <code>context</code> 改為內建 package，一些依賴的 package 也跟著升級了，所以目前建議使用 <strong>Flexible</strong> 會比較簡單<a href="#fnref:5" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇就對 &lt;a href=&quot;http://weddingcnp.appspot.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cage &amp;amp; Ping wedding&lt;/a&gt; frontend Service 使用了 GAE standard runtime 搭配 echo 網頁框架實作介紹&lt;/p&gt;
&lt;h4 id=&quot;weddingcnp-系例傳送門&quot;&gt;&lt;a href=&quot;#weddingcnp-系例傳送門&quot; class=&quot;headerlink&quot; title=&quot;weddingcnp 系例傳送門&quot;&gt;&lt;/a&gt;weddingcnp 系例傳送門&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://kaichu.io/2017/06/08/weddingcnp-via-gcp/&quot;&gt;weddingcnp via GCP 簡介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kaichu.io/2017/06/12/weddingcnp-via-gcp-1/&quot;&gt;weddingcnp via GCP - 1. 專案架構切分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kaichu.io/2017/06/18/weddingcnp-via-gcp-2/&quot;&gt;weddingcnp via GCP - 2. 前端頁面設計實作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kaichu.io/2017/07/12/weddingcnp-via-gcp-3/&quot;&gt;weddingcnp via GCP - 3. endpointAPI 設計實作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;weddingcnp 前端 vue.js 設計實作&lt;/li&gt;
&lt;li&gt;weddingcnp edm 寄送 sendgrid&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;weddingcnp-前端頁面設計實作&quot;&gt;&lt;a href=&quot;#weddingcnp-前端頁面設計實作&quot; class=&quot;headerlink&quot; title=&quot;weddingcnp 前端頁面設計實作&quot;&gt;&lt;/a&gt;weddingcnp 前端頁面設計實作&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://weddingcnp.appspot.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cage &amp;amp; Ping wedding&lt;/a&gt; &lt;strong&gt;frontend Service(Module)&lt;/strong&gt; 主要的功能如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;serve 靜態資源(audio、js、images、css)，serve 動態資源(婚紗照片由 Google Cloud Storage 提供)&lt;/li&gt;
&lt;li&gt;服務整個主體的網站架構中模版&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://weddingcnp.appspot.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;首頁介紹頁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://weddingcnp.appspot.com/gallery&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;婚妙相簿頁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;婚宴地點介紹引導頁(&lt;a href=&quot;https://weddingcnp.appspot.com/luzhu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;訂婚&lt;/a&gt;、&lt;a href=&quot;https://weddingcnp.appspot.com/chiayi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;結婚&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://weddingcnp.appspot.com/rsvp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;報名頁面&lt;/a&gt;(我要參加)&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--error hint--medium hint--rounded hint--bounce&quot; aria-label=&quot;報名頁面實作細節會再後序的篇幅說明
&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://weddingcnp.appspot.com/greeting&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;隱藏網頁&lt;/a&gt;(求婚影片搶先看)，連結由喜帖中的 QR code 提供&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://weddingcnp.appspot.com/bingo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bingo 遊戲&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/img/weddingcnp-via-gpc-2_1.png&quot; alt=&quot;weddingcnp frontend service&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;frontend Service&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── public                // static resource&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── audio&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── images&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── templates             // html templates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── bingo.tmpl        // bingo game&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── chiayi.tmpl       // 地點引導&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── gallery.tmpl      // 婚紗相簿&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── greeting.tmpl     // 隱藏網頁，連結由喜帖中的 QR code 提供&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── index.tmpl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── layout.tmpl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── live.tmpl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── luzhu.tmpl        // 地點引導&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── rsvp.tmpl         // 報名頁面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── app-engine.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── app-standalone.go     // Google App Engine entry point&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── app.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── app.yaml              // frontend services yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── index.yaml            // index &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; Datastore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── main.go               // &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; framework entry point&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="GAE" scheme="http://kaichu.io/tags/GAE/"/>
    
      <category term="GCE" scheme="http://kaichu.io/tags/GCE/"/>
    
      <category term="Datastore" scheme="http://kaichu.io/tags/Datastore/"/>
    
      <category term="EndpointAPI" scheme="http://kaichu.io/tags/EndpointAPI/"/>
    
      <category term="sendgrid" scheme="http://kaichu.io/tags/sendgrid/"/>
    
      <category term="API" scheme="http://kaichu.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>weddingcnp via GCP - 1. 專案架構切分</title>
    <link href="http://kaichu.io/2017/06/12/weddingcnp-via-gcp-1/"/>
    <id>http://kaichu.io/2017/06/12/weddingcnp-via-gcp-1/</id>
    <published>2017-06-12T14:14:22.000Z</published>
    <updated>2017-07-12T14:57:27.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>此篇就對 <a href="http://weddingcnp.appspot.com/" target="_blank" rel="noopener">Cage &amp; Ping wedding</a> 中實作的專案架構進行簡單的說明，每一個 Google App Engine Service 實作的細節會在後序的篇幅中介紹</p><h4 id="weddingcnp-系例傳送門"><a href="#weddingcnp-系例傳送門" class="headerlink" title="weddingcnp 系例傳送門"></a>weddingcnp 系例傳送門</h4><ol><li><a href="https://kaichu.io/2017/06/08/weddingcnp-via-gcp/">weddingcnp via GCP 簡介</a></li><li><a href="https://kaichu.io/2017/06/12/weddingcnp-via-gcp-1/">weddingcnp via GCP - 1. 專案架構切分</a></li><li><a href="https://kaichu.io/2017/06/18/weddingcnp-via-gcp-2/">weddingcnp via GCP - 2. 前端頁面設計實作</a></li><li><a href="https://kaichu.io/2017/07/12/weddingcnp-via-gcp-3/">weddingcnp via GCP - 3. endpointAPI 設計實作</a></li><li>weddingcnp 前端 vue.js 設計實作</li><li>weddingcnp edm 寄送 sendgrid</li></ol><h4 id="weddingcnp-專案架構"><a href="#weddingcnp-專案架構" class="headerlink" title="weddingcnp 專案架構"></a>weddingcnp 專案架構</h4><p><a href="http://weddingcnp.appspot.com/" target="_blank" rel="noopener">Cage &amp; Ping wedding</a> 完全架構在 Google App Engine 上，再功能任務上需要達到幾個要求</p><ul><li>服務靜態頁面, 一堆的 html/css/javascript 及些許的動態資料</li><li>作為 API 的伺服器，收集前端表單送過來的資料並儲存至 Datastore 中</li><li>webmasters domain owner</li></ul><p><strong>project structure</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── endpoints               // endpoints instance</span><br><span class="line">│   ├── apis</span><br><span class="line">│   ├── handler</span><br><span class="line">│   ├── lib</span><br><span class="line">│   ├── app.py</span><br><span class="line">│   ├── app.pyc</span><br><span class="line">│   ├── app.yaml</span><br><span class="line">│   └── ...</span><br><span class="line">├── frontend                // frontend instance</span><br><span class="line">│   ├── public              // 公開資源</span><br><span class="line">│   │   ├── audio           // 音樂檔</span><br><span class="line">│   │   ├── css             // 靜態網頁用 css</span><br><span class="line">│   │   ├── images          // 靜態網頁用 image</span><br><span class="line">│   │   └── js              // 靜態網頁用 javascript</span><br><span class="line">│   ├── templates           // golang 模版</span><br><span class="line">│   │   ├── bingo.tmpl</span><br><span class="line">│   │   ├── .....</span><br><span class="line">│   │   └── rsvp.tmpl</span><br><span class="line">│   ├── app-engine.go</span><br><span class="line">│   ├── app-standalone.go</span><br><span class="line">│   ├── app.go</span><br><span class="line">│   ├── app.yaml</span><br><span class="line">│   ├── index.yaml</span><br><span class="line">│   └── main.go</span><br><span class="line">├── ownership               // webmaster instance</span><br><span class="line">│   ├── app.yaml</span><br><span class="line">│   └── googleae8f4bcce8bec00c.html</span><br><span class="line">├── dispatch.yaml           // dispatch.yaml</span><br><span class="line">└── makefile                // cli helper makefile</span><br></pre></td></tr></table></figure><a id="more"></a><p>整個專案的檔案架構如上，可以分為 <code>endpoints</code>、<code>frontend</code>、<code>ownership</code> 三個 Service(Module), 而 Google App Engine 可以非常有彈性的透過 Service<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Service == Module, 以前的名子叫作 Module, 後來改名為 Service，透過 `dispatch.yaml` 來指定，可以針對 Service 給予不同的 runtime、機器資源或是用另一種程式語言混搭">[1]</span></a></sup> 的方式針對不同的任務給予不同資源<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[waldogcp](https://www.slideshare.net/cagechung/waldogcp) 一個也是基於 GCP 上建構出來的最佳路徑服務，亦使用 `dispatch.yaml` 來指派，對於服務中運算最重的部份(基因演算法)給予較大的機器">[2]</span></a></sup>，而 <a href="http://weddingcnp.appspot.com/" target="_blank" rel="noopener">Cage &amp; Ping wedding</a> 基本上使用預計的部份就足夠了，不需特別指派</p><p><strong>dispatch.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dispatch:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">"*/_ah/spi/*"</span></span><br><span class="line">    <span class="attr">module:</span> <span class="string">default</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">"*/tasks/*"</span></span><br><span class="line">    <span class="attr">module:</span> <span class="string">default</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">"*/favicon.ico"</span></span><br><span class="line">    <span class="attr">module:</span> <span class="string">frontend</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">"*/googleae8f4bcce8bec00c.html"</span></span><br><span class="line">    <span class="attr">module:</span> <span class="string">ownership</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">"*/*"</span></span><br><span class="line">    <span class="attr">module:</span> <span class="string">frontend</span></span><br></pre></td></tr></table></figure><p>上述的 <code>dispatch.yaml</code> 可以幫我們重導流量至我們設定的 Service(Module)，不過在部署的部份則是需要一個一個 Service(Module)來進行部署，部署完之後會在 Google App Engine Services 中看到所有的 Services</p><p><img src="/img/weddingcnp-via-gcp-1_1.png" alt="Google App Engine Services"></p><p>再則我們可以透過 version<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="將版號命名為 git 的 commit, 可以讓自己比較容易進行 Service 的版本管控">[3]</span></a></sup> 的方式來管理部署的 Service</p><p><img src="/img/weddingcnp-via-gcp-1_2.png" alt="Google App Engine Version"></p><p>當 Google App Engine Service 切分的越細，雖然可以任務的資源給予更細的調整，不過卻也造成部署上的複雜度，因此可以透過 <code>mikefile</code> 來加速部署的流程與速度</p><p><strong>makefile</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">ACCOUNT = cage.chung@gmail.com</span><br><span class="line">PROJECT = weddingcnp</span><br><span class="line">VERSION = b7484dd</span><br><span class="line"></span><br><span class="line">NODE_BIN = $(shell npm bin)</span><br><span class="line"></span><br><span class="line">set_config:</span><br><span class="line">gcloud config <span class="built_in">set</span> account $(ACCOUNT)</span><br><span class="line">gcloud config <span class="built_in">set</span> project $(PROJECT)</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line"><span class="comment"># endpoints dependency pakcage</span></span><br><span class="line">pip install -r endpoints/requirements.txt -t endpoints/lib</span><br><span class="line"></span><br><span class="line">run:</span><br><span class="line"><span class="comment"># node devServer.js &amp;</span></span><br><span class="line"><span class="comment">#goapp servedispatch.yaml frontend/app.yamlendpoints/app.yaml ownership/app.yaml</span></span><br><span class="line">dev_appserver.py dispatch.yaml frontend/app.yaml endpoints/app.yaml ownership/app.yaml --appidentity_email_address=save-avatar@weddingcnp.iam.gserviceaccount.com --appidentity_private_key_path=/Users/cage/.gvm/pkgsets/go1.7/global/src/github.com/cage1016/weddingcnp/endpoints/weddingcnp-3a652c96507d.pem --skip_sdk_update_check=yes --host 0.0.0.0 --enable_sendmail=yes</span><br><span class="line"></span><br><span class="line">update_frontend:</span><br><span class="line">goapp deploy -application $(PROJECT) -version $(VERSION) frontend/app.yaml</span><br><span class="line"></span><br><span class="line">update_endpoints:</span><br><span class="line">goapp deploy -application $(PROJECT) -version $(VERSION) endpoints/app.yaml</span><br><span class="line"></span><br><span class="line">update_ownership:</span><br><span class="line">appcfg.py update --application=$(PROJECT) --version=1 ownership/app.yaml</span><br><span class="line"></span><br><span class="line">update_dispatch:</span><br><span class="line">appcfg.py --application=$(PROJECT) --version=$(VERSION) update_dispatch .</span><br><span class="line"></span><br><span class="line">update_index:</span><br><span class="line">appcfg.py --application=$(PROJECT) --version=$(VERSION) update_indexes endpoints</span><br><span class="line"></span><br><span class="line">update_queue:</span><br><span class="line">appcfg.py --application=$(PROJECT) --version=$(VERSION) update_queues endpoints</span><br><span class="line"></span><br><span class="line">update: update_frontend update_endpoints update_ownership update_dispatch update_index update_queue</span><br></pre></td></tr></table></figure><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Service == Module, 以前的名子叫作 Module, 後來改名為 Service，透過 <code>dispatch.yaml</code> 來指定，可以針對 Service 給予不同的 runtime、機器資源或是用另一種程式語言混搭<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.slideshare.net/cagechung/waldogcp" target="_blank" rel="noopener">waldogcp</a> 一個也是基於 GCP 上建構出來的最佳路徑服務，亦使用 <code>dispatch.yaml</code> 來指派，對於服務中運算最重的部份(基因演算法)給予較大的機器<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">將版號命名為 git 的 commit, 可以讓自己比較容易進行 Service 的版本管控<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇就對 &lt;a href=&quot;http://weddingcnp.appspot.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cage &amp;amp; Ping wedding&lt;/a&gt; 中實作的專案架構進行簡單的說明，每一個 Google App Engine Service 實作的細節會在後序的篇幅中介紹&lt;/p&gt;
&lt;h4 id=&quot;weddingcnp-系例傳送門&quot;&gt;&lt;a href=&quot;#weddingcnp-系例傳送門&quot; class=&quot;headerlink&quot; title=&quot;weddingcnp 系例傳送門&quot;&gt;&lt;/a&gt;weddingcnp 系例傳送門&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://kaichu.io/2017/06/08/weddingcnp-via-gcp/&quot;&gt;weddingcnp via GCP 簡介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kaichu.io/2017/06/12/weddingcnp-via-gcp-1/&quot;&gt;weddingcnp via GCP - 1. 專案架構切分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kaichu.io/2017/06/18/weddingcnp-via-gcp-2/&quot;&gt;weddingcnp via GCP - 2. 前端頁面設計實作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kaichu.io/2017/07/12/weddingcnp-via-gcp-3/&quot;&gt;weddingcnp via GCP - 3. endpointAPI 設計實作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;weddingcnp 前端 vue.js 設計實作&lt;/li&gt;
&lt;li&gt;weddingcnp edm 寄送 sendgrid&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;weddingcnp-專案架構&quot;&gt;&lt;a href=&quot;#weddingcnp-專案架構&quot; class=&quot;headerlink&quot; title=&quot;weddingcnp 專案架構&quot;&gt;&lt;/a&gt;weddingcnp 專案架構&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://weddingcnp.appspot.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cage &amp;amp; Ping wedding&lt;/a&gt; 完全架構在 Google App Engine 上，再功能任務上需要達到幾個要求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服務靜態頁面, 一堆的 html/css/javascript 及些許的動態資料&lt;/li&gt;
&lt;li&gt;作為 API 的伺服器，收集前端表單送過來的資料並儲存至 Datastore 中&lt;/li&gt;
&lt;li&gt;webmasters domain owner&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;project structure&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── endpoints               // endpoints instance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── apis&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── lib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── app.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── app.pyc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── app.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── frontend                // frontend instance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── public              // 公開資源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── audio           // 音樂檔&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── css             // 靜態網頁用 css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── images          // 靜態網頁用 image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── js              // 靜態網頁用 javascript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── templates           // golang 模版&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── bingo.tmpl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── .....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── rsvp.tmpl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── app-engine.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── app-standalone.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── app.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── app.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── index.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── main.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── ownership               // webmaster instance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── app.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── googleae8f4bcce8bec00c.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── dispatch.yaml           // dispatch.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── makefile                // cli helper makefile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="GAE" scheme="http://kaichu.io/tags/GAE/"/>
    
      <category term="GCE" scheme="http://kaichu.io/tags/GCE/"/>
    
      <category term="Datastore" scheme="http://kaichu.io/tags/Datastore/"/>
    
      <category term="EndpointAPI" scheme="http://kaichu.io/tags/EndpointAPI/"/>
    
      <category term="sendgrid" scheme="http://kaichu.io/tags/sendgrid/"/>
    
      <category term="API" scheme="http://kaichu.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>weddingcnp via GCP</title>
    <link href="http://kaichu.io/2017/06/08/weddingcnp-via-gcp/"/>
    <id>http://kaichu.io/2017/06/08/weddingcnp-via-gcp/</id>
    <published>2017-06-08T03:11:00.000Z</published>
    <updated>2017-07-12T14:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="http://weddingcnp.appspot.com/" target="_blank" rel="noopener">Cage &amp; Ping wedding</a> 是一個我們為結婚喜宴處理朋友出席報名相關事宜特別開發的網站，所有的服務全部建構在 Google Cloud Platform 上</p><p>功能大至如下:</p><ul><li><p>喜宴相關資訊</p><ul><li>訂婚場/結婚場時間、地點、交通資訊</li><li>出席人數統計(強制使用 Google/Facebook 登入)。訂婚場/結婚場，人數、葷素、兒童椅等，需不需要住宿</li></ul></li><li><p>婚紗搶先看，先公開一部份。喜宴當天再公佈所有照片</p></li><li>喜宴進行中的 <a href="http://weddingcnp.appspot.com/bingo" target="_blank" rel="noopener">Bingo</a> 遊戲</li><li>EDM (發佈 email 給參加的朋友)</li><li>GA (關心一下有多少人來看)</li></ul><a id="more"></a><p><img src="/img/weddingcnp-via-gpc-0_1.png" alt="weddingcnp"></p><p>因為我們規劃了一些特別的梗(其實是要幫每一個出席的人作一張專屬的桌卡)，所需要每一個人的大頭照(avatar)，立馬就動到使用 Google/Facebook 進行登入，授權後程式能夠自動的抓到每一個人的照片，雖然不是每一個人的照片解析度都夠進行後制的加工，不過已經可以節省下非常多的時間</p><p>有結過婚的朋友都非常的清楚，統計出席人數是一件很麻煩的事情，出席的大人數、小孩數、小孩有沒有佔位、需不需要兒童座椅、有沒有住宿的需求。種種的資料統計很麻煩，所以就計設出一個表單，想出席的朋友直接登入 Google/Facebook 帳號後，填完相關問題的表單送出後就好了，收單前可以俢改資料(這塊踩到大的雷，透過 Google Analytic 可以很多是直接使用手機登入網站，不過遇到表單無法送出的問題，後來針對相容性作調整後才讓大家順利的報完名)</p><h2 id="weddingcnp-architecture"><a href="#weddingcnp-architecture" class="headerlink" title="weddingcnp architecture"></a>weddingcnp architecture</h2><p><img src="/img/weddingcnp-via-gpc-0_2.png" alt="weddingcnp architecture"></p><p>上面是 <a href="http://weddingcnp.appspot.com/" target="_blank" rel="noopener">weddingcnp</a> 的架構圖，整個網站完全是架構在 Google App Engine 上，透過 <code>dispatch.yaml</code> 的設定將流量切為服務前端靜態網頁(golang + vue.js + auth0)及後端 endpoint API 的部份。前後端為不同的 instance, 可以容易在 Google App Engine 的管理介面中計對前後端別分進行版控</p><p>Enpoints API 作為接收前端送過來的資料，並接報名相關資料儲存到 Google DataStore, 並自動將使用者的 Avatar 儲存到 Google Cloud Storage 並將所有的名單透過 Google client API 轉存一份至 Google Drive 方便後序處理。只要有人報名會自動透過 sendgrid 寄通知到自己的信箱，不需一直去盯著 Google Spreadsheet 上面的名單有沒有增加</p><p>整個構架的實作細節我會分為五個部份來說明, 先把標題寫出來，內容會陸續的補上</p><h4 id="1-weddingcnp-專案架構切分"><a href="#1-weddingcnp-專案架構切分" class="headerlink" title="1. weddingcnp 專案架構切分"></a>1. weddingcnp 專案架構切分</h4><p>使用 Google App Engine golang standard runtime 來作為網站的服務器，選擇使用吃資源較少的 golang，機器平均開機後的記憶體大約 200-300 MB, 效能比 Python 的好太多了</p><p>使用 <code>dispatch.yaml</code> 來進行服務的切分，將 endpoint API 的部份導至另外的 instance 作處理</p><h4 id="2-weddingcnp-前端頁面設計實作"><a href="#2-weddingcnp-前端頁面設計實作" class="headerlink" title="2. weddingcnp 前端頁面設計實作"></a>2. weddingcnp 前端頁面設計實作</h4><p>前端使用 <code>echo</code> 框架搭配 template 來產出頁面</p><h4 id="3-weddingcnp-endpointAPI-設計實作"><a href="#3-weddingcnp-endpointAPI-設計實作" class="headerlink" title="3. weddingcnp endpointAPI 設計實作"></a>3. weddingcnp endpointAPI 設計實作</h4><p>利用 <code>dispatch.yaml</code> 來指定 endpoint API 實作的 Service，這邊基本 endpoint API 熟悉度使用 Python 版本，service 的另一個好處是可以再同一個專案下使用混合的語言來發開，這兒的例子是前端使用 golang, endpoint API 的部份使用 Python，搭配 Flexible 的環境也可以的，彈性非常的高</p><h4 id="4-weddingcnp-前端-vue-js-設計實作"><a href="#4-weddingcnp-前端-vue-js-設計實作" class="headerlink" title="4. weddingcnp 前端 vue.js 設計實作"></a>4. weddingcnp 前端 vue.js 設計實作</h4><p>本來是打算使用 react.js 來實作前端，不過太花時間了，所以選擇了 vue.js 來快速實作出介接 endpoint API 前端的表單</p><h4 id="5-weddingcnp-edm-寄送-sendgrid"><a href="#5-weddingcnp-edm-寄送-sendgrid" class="headerlink" title="5. weddingcnp edm 寄送 sendgrid"></a>5. weddingcnp edm 寄送 sendgrid</h4><p>在收集到名單時，可以發通知給朋友。這兒的例子是我們的婚紗照片上線時，就發了 EDM 通知告訴朋友快點上來看。使用的是 sendgrid 來發信，透過 sendgrid 的模版、client API 讓發 html 的 EDM 輕鬆多了</p><h4 id="weddingcnp-系例傳送門"><a href="#weddingcnp-系例傳送門" class="headerlink" title="weddingcnp 系例傳送門"></a>weddingcnp 系例傳送門</h4><ol><li><a href="https://kaichu.io/2017/06/08/weddingcnp-via-gcp/">weddingcnp via GCP 簡介</a></li><li><a href="https://kaichu.io/2017/06/12/weddingcnp-via-gcp-1/">weddingcnp via GCP - 1. 專案架構切分</a></li><li><a href="https://kaichu.io/2017/06/18/weddingcnp-via-gcp-2/">weddingcnp via GCP - 2. 前端頁面設計實作</a></li><li><a href="https://kaichu.io/2017/07/12/weddingcnp-via-gcp-3/">weddingcnp via GCP - 3. endpointAPI 設計實作</a></li><li>weddingcnp 前端 vue.js 設計實作</li><li>weddingcnp edm 寄送 sendgrid</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://weddingcnp.appspot.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cage &amp;amp; Ping wedding&lt;/a&gt; 是一個我們為結婚喜宴處理朋友出席報名相關事宜特別開發的網站，所有的服務全部建構在 Google Cloud Platform 上&lt;/p&gt;
&lt;p&gt;功能大至如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;喜宴相關資訊&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;訂婚場/結婚場時間、地點、交通資訊&lt;/li&gt;
&lt;li&gt;出席人數統計(強制使用 Google/Facebook 登入)。訂婚場/結婚場，人數、葷素、兒童椅等，需不需要住宿&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;婚紗搶先看，先公開一部份。喜宴當天再公佈所有照片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;喜宴進行中的 &lt;a href=&quot;http://weddingcnp.appspot.com/bingo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Bingo&lt;/a&gt; 遊戲&lt;/li&gt;
&lt;li&gt;EDM (發佈 email 給參加的朋友)&lt;/li&gt;
&lt;li&gt;GA (關心一下有多少人來看)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="GAE" scheme="http://kaichu.io/tags/GAE/"/>
    
      <category term="GCE" scheme="http://kaichu.io/tags/GCE/"/>
    
      <category term="Datastore" scheme="http://kaichu.io/tags/Datastore/"/>
    
      <category term="EndpointAPI" scheme="http://kaichu.io/tags/EndpointAPI/"/>
    
      <category term="sendgrid" scheme="http://kaichu.io/tags/sendgrid/"/>
    
      <category term="API" scheme="http://kaichu.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Custom labstack/echo Context</title>
    <link href="http://kaichu.io/2017/05/07/echo-custom-context/"/>
    <id>http://kaichu.io/2017/05/07/echo-custom-context/</id>
    <published>2017-05-07T13:54:59.000Z</published>
    <updated>2020-03-16T07:39:17.203Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://github.com/labstack/echo" target="_blank" rel="noopener">labstack/echo</a> 一個輕量、高效的 <code>Golang</code> 網頁框架，讓使用者非常容易的建立 RESTful API 伺服器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line">e.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run echo API server</span></span><br><span class="line">$ go run main.go</span><br><span class="line">⇛ http server started on [::]:1323</span><br><span class="line"></span><br><span class="line"><span class="comment"># get request</span></span><br><span class="line">$ curl http://localhost:1323</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><a id="more"></a><p><code>echo</code> 的 API 非常容易的擴充，一個好的 RESTful API 應該有定義嚴謹的 Response 格式。雖然 <code>echo</code> 的回傳函式已經有提供 <code>JSON(code int, i interface{}) error</code> 的方式可以讓我們回傳 JSON 的格式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 JSON(code int, i interface&#123;&#125;) error 回傳 JSON 資料</span></span><br><span class="line"></span><br><span class="line">e.GET(<span class="string">"/json"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> c.JSON(http.StatusOK, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"Hello, World"</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>當 API 的數量慢慢的成長，遇到修改回傳格式時就會照成維護的成本大大增加，這時候 <code>ehco</code> 也提供了 <code>Context</code> 擴充的方式，讓我們透過加載客製的 <code>middleware</code> 方法來擴充 API 回傳的函式，再搭配依照 <a href="https://google.github.io/styleguide/jsoncstyleguide.xml" target="_blank" rel="noopener">Google JSON Style Guide</a> 的規範統一回傳的格式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API call with success response</span></span><br><span class="line"><span class="comment">// embed context.SuccessData in your response struct</span></span><br><span class="line">e.GET(<span class="string">"/json2"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">type</span> Res <span class="keyword">struct</span> &#123;</span><br><span class="line">    SuccessData</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  res := &amp;Res&#123;&#125;</span><br><span class="line">  res.Name = <span class="string">"Cage"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> c.(Ctx).Res(http.StatusOK).Data(res).Do()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"apiVersion"</span>: <span class="string">"v1"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"Name"</span>: <span class="string">"Cage"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// embed context.SuccessData in your response struct</span></span><br><span class="line"><span class="comment">// put array in items property</span></span><br><span class="line">e.GET(<span class="string">"/json3"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">type</span> Res <span class="keyword">struct</span> &#123;</span><br><span class="line">    SuccessData</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  res := &amp;Res&#123;&#125;</span><br><span class="line">  res.Items = []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"Cage"</span>, <span class="string">"Sunrain"</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> c.(Ctx).Res(http.StatusOK).Data(res).Do()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"apiVersion"</span>: <span class="string">"v1"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"items"</span>: [</span><br><span class="line">      <span class="string">"Cage"</span>,</span><br><span class="line">      <span class="string">"Sunrain"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API call fail with custom error code and error message</span></span><br><span class="line"><span class="keyword">return</span> c.(Ctx).Res(http.StatusBadRequest).Error(<span class="string">"message here"</span>).Code(<span class="number">4001</span>).Do()</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"apiVersion"</span>: <span class="string">"v1"</span>,</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">4001</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"message here"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API call fail with custom error code and error detail message</span></span><br><span class="line">erros := <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line">erros[<span class="number">0</span>] = <span class="string">"333"</span></span><br><span class="line"><span class="keyword">return</span> c.(Ctx).Res(http.StatusBadRequest).Error(<span class="string">"message here"</span>).Code(<span class="number">4001</span>).Errors(erros).Do()</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"apiVersion"</span>: <span class="string">"v1"</span>,</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">4001</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"message here"</span>,</span><br><span class="line">    <span class="attr">"errors"</span>: [</span><br><span class="line">      <span class="string">"333"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="How-to-custom-context"><a href="#How-to-custom-context" class="headerlink" title="How to custom context"></a>How to custom context</h2><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e.Use(<span class="function"><span class="keyword">func</span><span class="params">(next echo.HandlerFunc)</span> <span class="title">echo</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> next(Ctx&#123;c&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>context/context.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Ctx <span class="keyword">struct</span> &#123;</span><br><span class="line">echo.Context</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Ctx)</span> <span class="title">Res</span><span class="params">(httpStatus <span class="keyword">int</span>)</span> *<span class="title">jsonCall</span></span> &#123;</span><br><span class="line">rs := &amp;jsonCall&#123;</span><br><span class="line">c:          echo.Context(c),</span><br><span class="line">httpStatus: httpStatus,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>使用自己的 <code>Context</code> 最核心的部份是定義一個 <code>Struct</code> 並將 <code>echo</code> 中的 <code>echo.Context</code> 嵌入其中，這時候使用 <code>Golang</code> 特有的方式來對這一個 <code>Struct</code> 進行 <code>func</code> 的擴充，再完善自定欺的 <code>Context</code> 後即是需在透過 <code>middleware</code> 的方式掛載到 <code>echo</code> 中, 這樣一來在所有的 API 路中由就可以透過型別轉換的方式來操作自己義定的方法。</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>Repo <a href="https://github.com/cage1016/Custom-echo-Context" target="_blank" rel="noopener">Custom labstack/echo Context</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clone repo</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:cage1016/Custom-echo-Context.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># install go-packages</span></span><br><span class="line">$ glide i</span><br><span class="line"></span><br><span class="line"><span class="comment"># run echo API server</span></span><br><span class="line">$ go run main.go</span><br><span class="line">⇛ http server started on [::]:1323</span><br><span class="line"></span><br><span class="line"><span class="comment"># api test</span></span><br><span class="line">$ curl http://localhost:1323/json</span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"Hello, World"</span>&#125;</span><br><span class="line"></span><br><span class="line">$ curl http://localhost:1323/json2</span><br><span class="line">&#123;<span class="string">"apiVersion"</span>:<span class="string">"v1"</span>,<span class="string">"data"</span>:&#123;<span class="string">"code"</span>:0,<span class="string">"Name"</span>:<span class="string">"Cage"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">$ curl http://localhost:1323/json3</span><br><span class="line">&#123;<span class="string">"apiVersion"</span>:<span class="string">"v1"</span>,<span class="string">"data"</span>:&#123;<span class="string">"code"</span>:0,<span class="string">"items"</span>:[<span class="string">"Cage"</span>,<span class="string">"Sunrain"</span>]&#125;&#125;</span><br><span class="line"></span><br><span class="line">$ curl http://localhost:1323/json4</span><br><span class="line">&#123;<span class="string">"apiVersion"</span>:<span class="string">"v1"</span>,<span class="string">"error"</span>:&#123;<span class="string">"code"</span>:400001,<span class="string">"message"</span>:<span class="string">"Bad request"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">$ curl http://localhost:1323/json5</span><br><span class="line">&#123;<span class="string">"apiVersion"</span>:<span class="string">"v1"</span>,<span class="string">"error"</span>:&#123;<span class="string">"code"</span>:400001,<span class="string">"message"</span>:<span class="string">"Bad request"</span>,<span class="string">"errors"</span>:[<span class="string">"333"</span>]&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">$ go <span class="built_in">test</span> context/context_test.go</span><br><span class="line">ok  <span class="built_in">command</span>-line-arguments0.010s</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/labstack/echo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;labstack/echo&lt;/a&gt; 一個輕量、高效的 &lt;code&gt;Golang&lt;/code&gt; 網頁框架，讓使用者非常容易的建立 RESTful API 伺服器&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;github.com/labstack/echo&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	e := echo.New()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	e.GET(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c echo.Context)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c.String(http.StatusOK, &lt;span class=&quot;string&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	e.Logger.Fatal(e.Start(&lt;span class=&quot;string&quot;&gt;&quot;:1323&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# run echo API server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ go run main.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;⇛ http server started on [::]:1323&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# get request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl http://localhost:1323&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello, World!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="APIs" scheme="http://kaichu.io/tags/APIs/"/>
    
      <category term="Golang" scheme="http://kaichu.io/tags/Golang/"/>
    
      <category term="echo" scheme="http://kaichu.io/tags/echo/"/>
    
  </entry>
  
  <entry>
    <title>Golang regEx parse Facebook Live rtmp</title>
    <link href="http://kaichu.io/2017/02/21/golang-regex/"/>
    <id>http://kaichu.io/2017/02/21/golang-regex/</id>
    <published>2017-02-21T14:34:59.000Z</published>
    <updated>2020-03-16T07:53:39.362Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近因為公司專案的關係，開始接觸 Facebook Live API，需要動態的透過 API 去建立一組 Live 直播 並將 rtmp 的整個字串拆解成 <code>ServerUrl</code> 及 <code>StreamKey</code> 二個部份再由 ffmpeg 拿到這個資訊去 streaming。因為 Youtube Data API v3 可以別分拿 <code>StreamName</code> 及 <code>IngestionAddress</code>, 所以只需要對 Facebook 的部份特別處理</p><a id="more"></a><p>先來看一下 Facebook Live API 建立直播拿回來的完整的 rmtp url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtmp://rtmp-api.facebook.com:80/rtmp/1854721994809041?ds=1&amp;s_l=1&amp;a=ATjdLqx4xd23Q2mF</span><br></pre></td></tr></table></figure><p>完整的 rtmp url 由 StreamUrl + StreamKey 組成</p><ul><li>StreamUrl: <code>rtmp://rtmp-api.facebook.com:80/rtmp/</code></li><li>StreamKey: <code>1854721994809041?ds=1&amp;s_l=1&amp;a=ATjdLqx4xd23Q2mF</code></li></ul><p>因此可以透過 Golang regEx 的方式來拆解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getParams</span><span class="params">(regEx, url <span class="keyword">string</span>)</span> <span class="params">(paramsMap <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> compRegEx = regexp.MustCompile(regEx)</span><br><span class="line">    match := compRegEx.FindStringSubmatch(url)</span><br><span class="line"></span><br><span class="line">    paramsMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">    <span class="keyword">for</span> i, name := <span class="keyword">range</span> compRegEx.SubexpNames() &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; i &lt;= <span class="built_in">len</span>(match) &#123;</span><br><span class="line">            paramsMap[name] = match[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    params := getParams(<span class="string">`(?P&lt;ServerKey&gt;^rtmp://.+/)(?P&lt;StreamKey&gt;.+)`</span>, <span class="string">`rtmp://rtmp-api.facebook.com:80/rtmp/1854721994809041?ds=1&amp;s_l=1&amp;a=ATjdLqx4xd23Q2mF`</span>)</span><br><span class="line">    fmt.Println(params[<span class="string">"ServerKey"</span>]) <span class="comment">// rtmp://rtmp-api.facebook.com:80/rtmp/</span></span><br><span class="line">    fmt.Println(params[<span class="string">"StreamKey"</span>]) <span class="comment">// 1854721994809041?ds=1&amp;s_l=1&amp;a=ATjdLqx4xd23Q2mF</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://goo.gl/7nSGim" target="_blank" rel="noopener">The Go Playground - Demo</a></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ol><li><a href="https://regex-golang.appspot.com/assets/html/index.html" target="_blank" rel="noopener">Regex Tester Golang - A Go regular expression online tester</a></li><li><a href="https://developers.facebook.com/docs/videos/live-video" target="_blank" rel="noopener">Facebook Live API - Video</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因為公司專案的關係，開始接觸 Facebook Live API，需要動態的透過 API 去建立一組 Live 直播 並將 rtmp 的整個字串拆解成 &lt;code&gt;ServerUrl&lt;/code&gt; 及 &lt;code&gt;StreamKey&lt;/code&gt; 二個部份再由 ffmpeg 拿到這個資訊去 streaming。因為 Youtube Data API v3 可以別分拿 &lt;code&gt;StreamName&lt;/code&gt; 及 &lt;code&gt;IngestionAddress&lt;/code&gt;, 所以只需要對 Facebook 的部份特別處理&lt;/p&gt;
    
    </summary>
    
    
      <category term="rtmp" scheme="http://kaichu.io/tags/rtmp/"/>
    
      <category term="facebook" scheme="http://kaichu.io/tags/facebook/"/>
    
      <category term="golang" scheme="http://kaichu.io/tags/golang/"/>
    
      <category term="regEx" scheme="http://kaichu.io/tags/regEx/"/>
    
      <category term="Live API" scheme="http://kaichu.io/tags/Live-API/"/>
    
  </entry>
  
  <entry>
    <title>GAE go Image API for GCS</title>
    <link href="http://kaichu.io/2016/10/31/gae-go-image-api/"/>
    <id>http://kaichu.io/2016/10/31/gae-go-image-api/</id>
    <published>2016-10-31T13:55:10.000Z</published>
    <updated>2020-03-16T07:39:15.402Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p><a href="https://go-gae-image-api-example-dot-gae-lab-001.appspot.com/" target="_blank" rel="noopener">LIVE DEMO</a></p></blockquote><p>在開發 GAE 應用程式時，難免會遇到應用程式需要處理圖片的問題。GAE 的應用程用可以直接存取靜態的資源檔案，這塊直接在 <code>app.yaml</code> 檔案中設定就可以了，不過也因為 GAE 應用程式的特性，需要將所有的資源上傳一份到 GAE 正式環境中，所以會發現上傳專案的容量大小會爆增(如果你將所有需要的圖檔階直接放在程式內)。</p><p>專案檔案太大會影響 GAE 在自動擴展的效能，所以盡可能的將不必要的東西移多專案外(圖檔等)</p><a id="more"></a><p><em>app.yaml</em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">url:</span> <span class="string">/favicon.jpg</span></span><br><span class="line">  <span class="attr">mime_type:</span> <span class="string">image/x-icon</span></span><br><span class="line">  <span class="attr">static_files:</span> <span class="string">public/images/favicon.jpg</span></span><br><span class="line">  <span class="attr">upload:</span> <span class="string">public/images/favicon.jpg</span></span><br><span class="line"> </span><br><span class="line"><span class="bullet">-</span> <span class="attr">url:</span> <span class="string">/js/*</span></span><br><span class="line">  <span class="attr">mime_type:</span> <span class="string">text/javascript</span></span><br><span class="line">  <span class="attr">static_dir:</span> <span class="string">public/js</span></span><br><span class="line">  <span class="attr">secure:</span> <span class="string">always</span></span><br><span class="line"> </span><br><span class="line"><span class="bullet">-</span> <span class="attr">url:</span> <span class="string">/css/*</span></span><br><span class="line">  <span class="attr">mime_type:</span> <span class="string">text/css</span></span><br><span class="line">  <span class="attr">static_dir:</span> <span class="string">public/css</span></span><br><span class="line">  <span class="attr">secure:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">http_headers:</span></span><br><span class="line">    <span class="attr">Access-Control-Allow-Origin:</span> <span class="string">"*"</span></span><br><span class="line"> </span><br><span class="line"><span class="bullet">-</span> <span class="attr">url:</span> <span class="string">/images/*</span></span><br><span class="line">  <span class="attr">static_dir:</span> <span class="string">public/images</span></span><br><span class="line">  <span class="attr">secure:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>每一個 GCP 的專案可以有 <code>5G</code> 免費的 Google Cloud Storage 空間，所以將 GAE 上大檔案的靜態資源放到 GCS 是一個很好的決定，在 GAE 程式中可以使用 <code>google-api-go-client</code> 來存取 GCS 上相關的資源。如果是圖片檔的話，更可以直接用 Image API 的方式來直接讀取圖片資源</p><p><a href="https://cloud.google.com/appengine/docs/go/images/" target="_blank" rel="noopener">Images Go API</a> 讓我們使用 <code>Blobstore</code> 的方式來讀取/裁切圖檔，當我們透過 Blobstore 拿到靜態圖檔時可以直接透過 url 的方式對目標圖片進行調整圖檔的大小或進行裁切</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 將目標圖片重新縮放至 32 像素(等比例 - 長邊)</span><br><span class="line">http://lhx.ggpht.com/randomStringImageId=s32</span><br><span class="line"> </span><br><span class="line"># 將照片裁切至 32 像素</span><br><span class="line">http://lhx.ggpht.com/randomStringImageId=s32-c</span><br></pre></td></tr></table></figure><h2 id="imgServe"><a href="#imgServe" class="headerlink" title="imgServe"></a>imgServe</h2><p>因些我們就可以設計一個動態的路由來對應至 GCS 上特定路徑的圖片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/img?f=dress/banner.png --&gt; GCS:Bucket/dress/banner.png</span><br><span class="line">/img?f=dress/color/banner.png --&gt; GCS:Bucket/dress/color/banner.png</span><br><span class="line">/img?f=dress/color/banner.png&amp;s=200 --&gt; GCS:Bucket/dress/color/banner.png 等比縮放至 200 像素</span><br><span class="line">/img?f=dress/color/banner.png&amp;s=200-c --&gt; GCS:Bucket/dress/color/banner.png 等比縮放至 200 像素且進行 1:1 的裁切</span><br></pre></td></tr></table></figure><p>如此一來前端面頁如果需要引用照片，可以直接使用 <code>&lt;img src=&quot;/img?f=dress/banner.png&quot; alt=&quot;&quot;&gt;</code>，如果目標圖片不存在則直接輸入一開始就準備好的 image 404 圖片進行代替</p><p><em>main.go</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang.org/x/net/context"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"> </span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line"><span class="string">"github.com/labstack/echo/engine/standard"</span></span><br><span class="line"> </span><br><span class="line"><span class="string">"google.golang.org/appengine"</span></span><br><span class="line"><span class="string">"google.golang.org/appengine/blobstore"</span></span><br><span class="line"><span class="string">"google.golang.org/appengine/image"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">Bucket           = <span class="string">"&lt;your-gae-default-bucket&gt;"</span></span><br><span class="line">NotFoundImageURL = <span class="string">"img-api-example/img404.jpg"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * index page</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexGET</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">c.Render(<span class="number">200</span>, <span class="string">"index.tpl"</span>, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"title"</span>: <span class="string">"go gae image API example"</span>,</span><br><span class="line"><span class="string">"images"</span>: []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"img?f=img-api-example/1.png"</span>,</span><br><span class="line"><span class="string">"img?f=img-api-example/1.png&amp;s=200"</span>,</span><br><span class="line"><span class="string">"img?f=img-api-example/1.png&amp;s=200-c"</span>,</span><br><span class="line"><span class="string">"img?f=img-api-example/2.jpg"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get not foound image default image, img404.jpg</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNotFoundImage</span><span class="params">(ctx context.Context)</span> <span class="params">(urlString <span class="keyword">string</span>, err error)</span></span> &#123;</span><br><span class="line">blobPath := fmt.Sprintf(<span class="string">"/gs/%s/%s"</span>, Bucket, NotFoundImageURL)</span><br><span class="line">blobKey, err := blobstore.BlobKeyForFile(ctx, blobPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">opts := image.ServingURLOptions&#123;Secure: <span class="literal">false</span>, Crop: <span class="literal">true</span>&#125;</span><br><span class="line">url, err := image.ServingURL(ctx, blobKey, &amp;opts)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">urlString = url.String()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * image serve handler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">imgServe</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">ctx := appengine.NewContext(c.Request().(*standard.Request).Request)</span><br><span class="line"> </span><br><span class="line">filePath := c.QueryParam(<span class="string">"f"</span>)</span><br><span class="line">size := c.QueryParam(<span class="string">"s"</span>)</span><br><span class="line"> </span><br><span class="line">blobPath := fmt.Sprintf(<span class="string">"/gs/%s/%s"</span>, Bucket, filePath)</span><br><span class="line">blobKey, err := blobstore.BlobKeyForFile(ctx, blobPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(http.StatusExpectationFailed, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">opts := image.ServingURLOptions&#123;Secure: <span class="literal">false</span>, Crop: <span class="literal">true</span>&#125;</span><br><span class="line"><span class="keyword">if</span> url, err := image.ServingURL(ctx, blobKey, &amp;opts); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> n, err := getNotFoundImage(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.Redirect(http.StatusTemporaryRedirect, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> size != <span class="string">""</span> &#123;</span><br><span class="line">c.Redirect(http.StatusTemporaryRedirect, fmt.Sprintf(<span class="string">"%s=s%s"</span>, url.String(), size))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.Redirect(http.StatusTemporaryRedirect, url.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">e.GET(<span class="string">"/"</span>, indexGET)</span><br><span class="line">e.GET(<span class="string">"/img"</span>, imgServe)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GAE-Go-Image-serve-GCS-image"><a href="#GAE-Go-Image-serve-GCS-image" class="headerlink" title="GAE Go Image serve GCS image"></a>GAE Go Image serve GCS image</h3><p><img src="/img/gae-go-image-api.png" alt></p><h3 id="demo-code"><a href="#demo-code" class="headerlink" title="demo code"></a>demo code</h3><p><a href="https://github.com/cage1016/gae-go-image-example" target="_blank" rel="noopener">cage1016/gae-go-image-example: GAE go image API example</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://go-gae-image-api-example-dot-gae-lab-001.appspot.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LIVE DEMO&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在開發 GAE 應用程式時，難免會遇到應用程式需要處理圖片的問題。GAE 的應用程用可以直接存取靜態的資源檔案，這塊直接在 &lt;code&gt;app.yaml&lt;/code&gt; 檔案中設定就可以了，不過也因為 GAE 應用程式的特性，需要將所有的資源上傳一份到 GAE 正式環境中，所以會發現上傳專案的容量大小會爆增(如果你將所有需要的圖檔階直接放在程式內)。&lt;/p&gt;
&lt;p&gt;專案檔案太大會影響 GAE 在自動擴展的效能，所以盡可能的將不必要的東西移多專案外(圖檔等)&lt;/p&gt;
    
    </summary>
    
    
      <category term="GAE" scheme="http://kaichu.io/tags/GAE/"/>
    
      <category term="Golang" scheme="http://kaichu.io/tags/Golang/"/>
    
      <category term="echo" scheme="http://kaichu.io/tags/echo/"/>
    
      <category term="pongor" scheme="http://kaichu.io/tags/pongor/"/>
    
  </entry>
  
  <entry>
    <title>解決 gvm install go1.4 安裝錯誤 [筆記]</title>
    <link href="http://kaichu.io/2016/09/21/gvm-install-go1-4/"/>
    <id>http://kaichu.io/2016/09/21/gvm-install-go1-4/</id>
    <published>2016-09-21T14:39:53.000Z</published>
    <updated>2016-09-21T14:40:21.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本來是使用 <code>brew</code> 來管理 <code>golang</code> 的版本，<code>brew</code> 及 <code>brew cask</code> 某些程度是很方便，不過也越來越覺得彈性差了點。繼 node 使用 tj 大神的 <a href="https://github.com/tj/n" target="_blank" rel="noopener">tj/n: Node version management</a> 之外，golang 也打算使用 <a href="https://github.com/moovweb/gvm" target="_blank" rel="noopener">moovweb/gvm: Go Version Manager</a> 來管理版本，不過在照著官方步驟時報錯了，順手記錄了一下解決的方式</p><a id="more"></a><h1 id="brew-info-go"><a href="#brew-info-go" class="headerlink" title="brew info go"></a>brew info go</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ brew info go</span><br><span class="line">go: stable 1.6 (bottled), HEAD</span><br><span class="line">Go programming environment</span><br><span class="line">https://golang.org</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/go/1.4.2 (4,567 files, 148.2M)</span><br><span class="line">  Built from <span class="built_in">source</span></span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/go/1.5 (5,328 files, 259.2M)</span><br><span class="line">  Poured from bottle</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/go/1.5.2 (5,336 files, 259.6M)</span><br><span class="line">  Poured from bottle</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/go/1.5.3 (5,337 files, 269.6M)</span><br><span class="line">  Poured from bottle</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/go/1.6 (5,653 files, 472.9M) *</span><br><span class="line">  Poured from bottle</span><br><span class="line">From: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/go.rb</span><br><span class="line">==&gt; Options</span><br><span class="line">--without-cgo</span><br><span class="line">    Build without cgo</span><br><span class="line">--without-godoc</span><br><span class="line">    godoc will not be installed <span class="keyword">for</span> you</span><br><span class="line">--without-vet</span><br><span class="line">    vet will not be installed <span class="keyword">for</span> you</span><br><span class="line">--HEAD</span><br><span class="line">    Install HEAD version</span><br><span class="line">==&gt; Caveats</span><br><span class="line">As of go 1.2, a valid GOPATH is required to use the `go get` <span class="built_in">command</span>:</span><br><span class="line">  https://golang.org/doc/code.html<span class="comment">#GOPATH</span></span><br><span class="line"></span><br><span class="line">You may wish to add the GOROOT-based install location to your PATH:</span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/opt/go/libexec/bin</span><br></pre></td></tr></table></figure><h1 id="fixed-gvm-install-go1-4-報錯"><a href="#fixed-gvm-install-go1-4-報錯" class="headerlink" title="fixed gvm install go1.4 報錯"></a>fixed gvm install go1.4 報錯</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gvm install go1.4</span><br><span class="line">Installing go1.4...</span><br><span class="line"> * Compiling...</span><br><span class="line">ERROR: Failed to compile. Check the logs at /Users/cage/.gvm/logs/go-go1.4-compile.log</span><br><span class="line">ERROR: Failed to use installed version</span><br></pre></td></tr></table></figure><p>拿錯誤訊息餵狗之後找到 <a href="https://github.com/moovweb/gvm/pull/176/commits/6d99f7dee6ddd09992620654c2067aaf869b3d1c" target="_blank" rel="noopener">update readme.md for go1.5 installation by imyelo · Pull Request #176 · moovweb/gvm</a></p><p>install go1.4 順利完成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gvm install go1.4 -B</span><br><span class="line">Installing go1.4 from binary <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p>指定 golang 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gvm use go1.4</span><br><span class="line">Now using version go1.4</span><br></pre></td></tr></table></figure><p>順利安裝其他版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gvm install go1.7</span><br><span class="line">Installing go1.7...</span><br><span class="line"> * Compiling...</span><br><span class="line">go1.7 successfully installed!</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本來是使用 &lt;code&gt;brew&lt;/code&gt; 來管理 &lt;code&gt;golang&lt;/code&gt; 的版本，&lt;code&gt;brew&lt;/code&gt; 及 &lt;code&gt;brew cask&lt;/code&gt; 某些程度是很方便，不過也越來越覺得彈性差了點。繼 node 使用 tj 大神的 &lt;a href=&quot;https://github.com/tj/n&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tj/n: Node version management&lt;/a&gt; 之外，golang 也打算使用 &lt;a href=&quot;https://github.com/moovweb/gvm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;moovweb/gvm: Go Version Manager&lt;/a&gt; 來管理版本，不過在照著官方步驟時報錯了，順手記錄了一下解決的方式&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="http://kaichu.io/tags/Golang/"/>
    
      <category term="gvm" scheme="http://kaichu.io/tags/gvm/"/>
    
  </entry>
  
  <entry>
    <title>Atom sync-settings</title>
    <link href="http://kaichu.io/2016/09/20/atom-sync-settings/"/>
    <id>http://kaichu.io/2016/09/20/atom-sync-settings/</id>
    <published>2016-09-20T14:58:40.000Z</published>
    <updated>2017-05-03T09:21:59.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://goo.gl/LGBVzh" target="_blank" rel="noopener">Atom</a> 是一個 GitHub 開發的免費、開放原始碼編輯器，目前有非常多的擴充工具可以安裝(<strong>4,913</strong> packages)，也有非常多的主題佈景可以安裝(<strong>1,645</strong> themes)，彈性非常的高，你可以打造成自己熟悉的開發環境。</p><p><img src="/img/atom-sync-settings-02.jpg" alt="atom: sync-settings"></p><a id="more"></a><p>當你好不容易打造好自己熟悉的開發環境時，如果要換電腦時，重新還原熟悉的開發環境是需要花一點功夫。以下是手動的方式</p><p>備份機上的清單到一個檔案<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apm list --installed --bare | grep <span class="string">'^[^@]\+'</span> -o &gt; my_atom_packages.txt</span><br></pre></td></tr></table></figure></p><p>在另外一台機器上使用 <code>apm</code> 進行批次安裝的動作<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apm install --packages-file my_atom_packages.txt</span><br></pre></td></tr></table></figure></p><p>上述的動作雖然可以幫你快速的解決安裝擴充工具的問題，不過設定檔得自已再進行設定，還是有一點麻煩</p><h2 id="atom-community-sync-settings"><a href="#atom-community-sync-settings" class="headerlink" title="atom-community/sync-settings"></a><a href="https://github.com/atom-community/sync-settings" target="_blank" rel="noopener">atom-community/sync-settings</a></h2><blockquote><p>Synchronize all your settings and packages across atom instances</p></blockquote><p>一個超極方便的擴充工具來解決你 Atom 上擴充工具的同步及其設定，<strong>sync-settings</strong> 是透過 Github <a href="https://gist.github.com/" target="_blank" rel="noopener">Gist</a> 來幫你備份擴充工具的清單即設定，所以在 sync-settings 的設定中你必需填入</p><ul><li><strong>Personal Access Token</strong> (一組適合特殊需求專給特定程式介接存取 github 資源用:這就是 sync-settings)</li><li><strong>Gist Id</strong> (你的 Gist id)</li></ul><h4 id="建立-Personal-Access-Token"><a href="#建立-Personal-Access-Token" class="headerlink" title="建立 Personal Access Token"></a>建立 Personal Access Token</h4><p><img src="/img/atom-sync-settings-03.jpg" alt="Personal Access Tokens"></p><p>打開 <a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener">Github: Personal Access Tokens</a> &gt; 點選 gist &gt; Generate token &gt; 複製並填入 Atom:sync-settings 中</p><h4 id="建立-Gist"><a href="#建立-Gist" class="headerlink" title="建立 Gist"></a>建立 Gist</h4><p>打開 <a href="https://gist.github.com/" target="_blank" rel="noopener">Create a new Gist</a> 填上說明 &gt; Create secret gist &gt; 複製 Gist Id 並填入 Atom:sync-settings 中</p><p><img src="/img/atom-sync-settings-04.jpg" alt="Create a new Gist"><br><img src="/img/atom-sync-settings-05.jpg" alt="Create a new Gist"></p><h4 id="Sync-Backup"><a href="#Sync-Backup" class="headerlink" title="Sync Backup"></a>Sync Backup</h4><p>在填入 Personal Access Token 及 Gist Id 後，就可以進行同步的動作 <code>Shit + command + P</code> (Mac), <code>Ctrl + Shit + P</code> (Windows)</p><p><img src="/img/atom-sync-settings-06.jpg" alt="sync-settings: backup"><br><img src="/img/atom-sync-settings-07.jpg" alt="sync-settings: backup success message"></p><h4 id="Sync-restore"><a href="#Sync-restore" class="headerlink" title="Sync restore"></a>Sync restore</h4><p>在其他電腦上裝好 Atom &gt; 安裝 sync-settings &gt; 進行 Sync: restore 的動作 <code>Shit + command + P</code> (Mac), <code>Ctrl + Shit + P</code> (Windows)</p><p><img src="/img/atom-sync-settings-08.png" alt="sync-settings: restore"><br><img src="/img/atom-sync-settings-09.png" alt="sync-settings: restore"></p><p>最後分享一下我的 Atom 擴充工具清單</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">Sublime-Style-Column-Selection</span><br><span class="line">atom-alignment</span><br><span class="line">atom-beautify</span><br><span class="line">atom-ternjs</span><br><span class="line">auto-update-packages</span><br><span class="line">autocomplete-go</span><br><span class="line">autocomplete-plus</span><br><span class="line">builder-go</span><br><span class="line">change-case</span><br><span class="line">cobalt2-syntax</span><br><span class="line">color-picker</span><br><span class="line">docblockr</span><br><span class="line">emmet</span><br><span class="line">environment</span><br><span class="line">file-icons</span><br><span class="line">fold-functions</span><br><span class="line">go-config</span><br><span class="line">go-debug</span><br><span class="line">go-get</span><br><span class="line">go-plus</span><br><span class="line">go-rename</span><br><span class="line">godoc</span><br><span class="line">gofmt</span><br><span class="line">gometalinter-linter</span><br><span class="line">gorename</span><br><span class="line">highlight-selected</span><br><span class="line">imdone-atom</span><br><span class="line">jshint</span><br><span class="line">language-c</span><br><span class="line">language-docker</span><br><span class="line">language-gitignore</span><br><span class="line">language-protobuf</span><br><span class="line">language-shellscript</span><br><span class="line">linter</span><br><span class="line">linter-eslint</span><br><span class="line">linter-js-standard</span><br><span class="line">linter-jscs</span><br><span class="line">linter-jshint</span><br><span class="line">mocha-test-runner</span><br><span class="line">navigator-godef</span><br><span class="line">open-recent</span><br><span class="line">package-sync</span><br><span class="line">pigments</span><br><span class="line">project-manager</span><br><span class="line">react</span><br><span class="line">regex-railroad-diagram</span><br><span class="line">rst-preview-pandoc</span><br><span class="line"><span class="built_in">set</span>-syntax</span><br><span class="line">seti-syntax</span><br><span class="line">seti-ui</span><br><span class="line">sync-settings</span><br><span class="line">terminal-plus</span><br><span class="line">tester-go</span><br><span class="line">todo-show</span><br><span class="line">tool-bar</span><br><span class="line">tool-bar-main</span><br><span class="line">trailing-spaces</span><br><span class="line">tree-view</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://goo.gl/LGBVzh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Atom&lt;/a&gt; 是一個 GitHub 開發的免費、開放原始碼編輯器，目前有非常多的擴充工具可以安裝(&lt;strong&gt;4,913&lt;/strong&gt; packages)，也有非常多的主題佈景可以安裝(&lt;strong&gt;1,645&lt;/strong&gt; themes)，彈性非常的高，你可以打造成自己熟悉的開發環境。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/atom-sync-settings-02.jpg&quot; alt=&quot;atom: sync-settings&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Atom" scheme="http://kaichu.io/tags/Atom/"/>
    
  </entry>
  
  <entry>
    <title>COSCUP 2016 - NAS也會揀土豆</title>
    <link href="http://kaichu.io/2016/08/22/retrain-inception-model-for-nas/"/>
    <id>http://kaichu.io/2016/08/22/retrain-inception-model-for-nas/</id>
    <published>2016-08-22T09:30:55.000Z</published>
    <updated>2016-09-02T02:02:41.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="/img/tensorflow.png" alt="tensorflow"></p><p>今年在 <a href="http://coscup.org/2016/schedules.html" target="_blank" rel="noopener">COSCUP</a> 2016 上分享了「<strong>NAS 也可以揀土豆</strong>」主題。</p><blockquote><p>TensorFlow 是由 Google 所公布的開源機器學習平台，根據 Github 的數據統計，TensorFlow 成為2016年最受關注的十大開源專案之一。此次分享將介紹，如何在 NAS 上整合TensorFlow 及相關 Open source project，以展示幾種相關的資料分析應用。</p></blockquote><h2 id="outline"><a href="#outline" class="headerlink" title="outline"></a>outline</h2><ul><li>Machine learning</li><li>Deep learning<ul><li>Neural Network</li><li>Convolutional neural network</li></ul></li><li>Building a classifier for NAS</li><li>Study information</li></ul><a id="more"></a><h2 id="slide"><a href="#slide" class="headerlink" title="slide"></a>slide</h2><iframe src="http://www.slideshare.net/slideshow/embed_code/key/zieUigbiN3ArMn" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px"><h2 id="github-demo-repo"><a href="#github-demo-repo" class="headerlink" title="github demo repo"></a>github demo repo</h2><p><a href="https://github.com/cage1016/coscup2016-nas-session" target="_blank" rel="noopener">cage1016/coscup2016-nas-session: Nas 也可以揀土豆</a></p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>在準備簡報的過程中也學習到了 Machine learning, Deep learning, Convolutional Neural Network(CNN) 的相關概念, 其實花了很多時候再分辨這其中的差異有什麼不同, 自己也是剛剛開始學習這門學科, 主題分享上算是入門給大家比較大一點的概念(也是自己的學習心得)</p><h2 id="Study-information"><a href="#Study-information" class="headerlink" title="Study information"></a>Study information</h2><ul><li><a href="https://www.udacity.com/course/deep-learning--ud730" target="_blank" rel="noopener">Deep Learning | Udacity</a></li><li><a href="https://research.googleblog.com/2016/03/train-your-own-image-classifier-with.html" target="_blank" rel="noopener">Research Blog: Train your own image classifier with Inception in TensorFlow</a></li><li><a href="https://github.com/jtoy/awesome-tensorflow" target="_blank" rel="noopener">jtoy/awesome-tensorflow: TensorFlow - A curated list of dedicated resources http://tensorflow.org</a></li><li><a href="http://www.slideshare.net/perone/deep-learning-convolutional-neural-networks" target="_blank" rel="noopener">Deep Learning - Convolutional Neural Networks</a></li><li><a href="http://neuralnetworksanddeeplearning.com/chap1.html" target="_blank" rel="noopener">Neural networks and deep learning</a></li><li><a href="http://valse.mmcheng.net/ftp/20150312/dsn.pdf" target="_blank" rel="noopener">Multiple Component Learning</a></li><li><a href="https://github.com/NVIDIA/DIGITS/blob/master/docs/GettingStarted.md" target="_blank" rel="noopener">DIGITS/GettingStarted.md at master · NVIDIA/DIGITS</a></li><li><a href="https://www.tensorflow.org/versions/r0.9/how_tos/image_retraining/index.html" target="_blank" rel="noopener">How to Retrain Inception’s Final Layer for New Categories</a></li><li><a href="https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/index.html?index=..%2F..%2Findex#0" target="_blank" rel="noopener">TensorFlow For Poets</a></li><li><a href="https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.gc2fcdcce7_216_48" target="_blank" rel="noopener">DIY Deep Learning for Vision: a Hands-On Tutorial with Caffe - Google Slides</a></li><li><a href="http://caffe.berkeleyvision.org/" target="_blank" rel="noopener">Caffe | Deep Learning Framework</a></li><li><a href="http://www.wildml.com/2015/11/understanding-convolutional-neural-networks-for-nlp/" target="_blank" rel="noopener">Understanding Convolutional Neural Networks for NLP – WildML</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/tensorflow.png&quot; alt=&quot;tensorflow&quot;&gt;&lt;/p&gt;
&lt;p&gt;今年在 &lt;a href=&quot;http://coscup.org/2016/schedules.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;COSCUP&lt;/a&gt; 2016 上分享了「&lt;strong&gt;NAS 也可以揀土豆&lt;/strong&gt;」主題。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TensorFlow 是由 Google 所公布的開源機器學習平台，根據 Github 的數據統計，TensorFlow 成為2016年最受關注的十大開源專案之一。此次分享將介紹，如何在 NAS 上整合TensorFlow 及相關 Open source project，以展示幾種相關的資料分析應用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;outline&quot;&gt;&lt;a href=&quot;#outline&quot; class=&quot;headerlink&quot; title=&quot;outline&quot;&gt;&lt;/a&gt;outline&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Machine learning&lt;/li&gt;
&lt;li&gt;Deep learning&lt;ul&gt;
&lt;li&gt;Neural Network&lt;/li&gt;
&lt;li&gt;Convolutional neural network&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building a classifier for NAS&lt;/li&gt;
&lt;li&gt;Study information&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="NAS" scheme="http://kaichu.io/tags/NAS/"/>
    
      <category term="tensorflow" scheme="http://kaichu.io/tags/tensorflow/"/>
    
      <category term="retrain-model" scheme="http://kaichu.io/tags/retrain-model/"/>
    
      <category term="coscup" scheme="http://kaichu.io/tags/coscup/"/>
    
  </entry>
  
  <entry>
    <title>golang serving a single page application</title>
    <link href="http://kaichu.io/2016/08/04/golang-serve-static-site/"/>
    <id>http://kaichu.io/2016/08/04/golang-serve-static-site/</id>
    <published>2016-08-04T02:22:03.000Z</published>
    <updated>2020-03-16T07:53:39.362Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="golang-serve-SPA"><a href="#golang-serve-SPA" class="headerlink" title="golang serve SPA"></a>golang serve SPA</h2><p>最近有前端開發的需求，選用了 <a href="https://github.com/davezuko/react-redux-starter-kit" target="_blank" rel="noopener">react-redux-starter-kit</a> 來進行二次開發，省去一些想要使用 React, redux, redux-router 的基本配置，這樣速度會快一點</p><p>因為 <code>react-redux-starter-kit</code> 也使用 webpack 進行程式碼的打包, 所以最後的產出預設在 <code>dist</code> 資料夾中，所以部署時只需要一個簡單的 host server 即可</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dist example</span></span><br><span class="line">$ l</span><br><span class="line">total 752</span><br><span class="line">-rw-r--r--  1 cage  staff    3317 Aug  4 00:22 1.counter.fa53ea42bc9ff9de19bd.js</span><br><span class="line">-rw-r--r--  1 cage  staff  144953 Aug  4 00:22 app.5d0f2ab61ef7dd5daac5.js</span><br><span class="line">-rw-r--r--  1 cage  staff    2619 Aug  4 00:22 app.97a1751c9624097874a4b54cb93fa067.css</span><br><span class="line">-rw-r--r--  1 cage  staff     173 Aug  4 00:33 app.go</span><br><span class="line">-rw-r--r--  1 cage  staff   24838 Aug  4 00:22 favicon.ico</span><br><span class="line">-rw-r--r--  1 cage  staff     103 Aug  4 00:22 humans.txt</span><br><span class="line">-rw-r--r--  1 cage  staff     604 Aug  4 00:22 index.html</span><br><span class="line">-rw-r--r--  1 cage  staff      24 Aug  4 00:22 robots.txt</span><br><span class="line">-rw-r--r--  1 cage  staff  183224 Aug  4 00:22 vendor.9012d9d99074521f418e.js</span><br></pre></td></tr></table></figure><p>考慮效能的問題, 最後打算使用 golang 來當作 host server, golang 內建的 <code>net/http</code> 可以輕鬆的使用 <code>http.FileServer(http.Dir(&quot;./&quot;))</code> 來 host 整個靜態目錄</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Println(<span class="string">"Listening port 3000..."</span>)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">":3000"</span>, http.FileServer(http.Dir(<span class="string">"./"</span>))))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是上述的作法基本上是可以動的, 不過如果前端自己有使用到 <code>redux-router</code> 時, golang 並不會將請求導至前端的 router 而是直接得到 golang 404 而不會進到前端 redux-router 訂定的 router (如果有使用 redux-router 對 Notfound 進行處理)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/dfa</span><br></pre></td></tr></table></figure><p><img src="/img/golang-serve-static-site-404-golang.png" alt="golang 404 page"></p><p>所以我們使用了 golang <code>echo</code> 的 web framework, 監聽所有的請求並直接導至 <code>index.html</code> 的前端靜態檔案</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line"><span class="string">"github.com/labstack/echo/engine/standard"</span></span><br><span class="line">mw <span class="string">"github.com/labstack/echo/middleware"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">wwwRoot = <span class="string">"./"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">httpPort = flag.Int(<span class="string">"http"</span>, <span class="number">3000</span>, <span class="string">"http port number"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span> *<span class="title">echo</span>.<span class="title">Echo</span></span> &#123;</span><br><span class="line"></span><br><span class="line">e := echo.New()</span><br><span class="line"></span><br><span class="line">e.Debug()</span><br><span class="line"></span><br><span class="line">e.Use(mw.Logger())</span><br><span class="line">e.Use(mw.Recover())</span><br><span class="line"></span><br><span class="line">e.Any(<span class="string">"/*"</span>, echo.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">r := c.Request().(*standard.Request).Request</span><br><span class="line">w := c.Response().(*standard.Response).ResponseWriter</span><br><span class="line"></span><br><span class="line">requestPath := r.URL.Path</span><br><span class="line">fileSystemPath := wwwRoot + r.URL.Path</span><br><span class="line">endURIPath := strings.Split(requestPath, <span class="string">"/"</span>)[<span class="built_in">len</span>(strings.Split(requestPath, <span class="string">"/"</span>))<span class="number">-1</span>]</span><br><span class="line">splitPath := strings.Split(endURIPath, <span class="string">"."</span>)</span><br><span class="line">splitLength := <span class="built_in">len</span>(splitPath)</span><br><span class="line"><span class="keyword">if</span> splitLength &gt; <span class="number">1</span> &amp;&amp; splitPath[splitLength<span class="number">-1</span>] != <span class="string">"go"</span> &#123;</span><br><span class="line">f, error := os.Stat(fileSystemPath)</span><br><span class="line"><span class="keyword">if</span> error == <span class="literal">nil</span> &amp;&amp; !f.IsDir() &#123;</span><br><span class="line">http.ServeFile(w, r, fileSystemPath)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">http.ServeFile(w, r, wwwRoot+<span class="string">"index.html"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">server := Init()</span><br><span class="line">server.Run(standard.New(fmt.Sprintf(<span class="string">`:%d`</span>, *httpPort)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/dfa</span><br></pre></td></tr></table></figure><p><img src="/img/golang-serve-static-site-404.jpg" alt="redux-router 404 page"></p><h2 id="run-SPA-as-with-docker-image"><a href="#run-SPA-as-with-docker-image" class="headerlink" title="run SPA as with docker image"></a>run SPA as with docker image</h2><p>處理完 golang 對 single page application 的支援, 進一步簡化部署的流程, 可以將整個 single page application 連同 <code>app.go</code> 利用 golang build 的方式編譯成執行檔, 再將 golang 執行檔透過 <code>Dockerfile</code> 編譯成 docker image, 這樣一來就可以很容易的部署在任何可以執行 container 的環境</p><p><img src="/img/golang-serve-static-site-flow.jpg" alt="flow"></p><p>上述一系列的流程我們可以使用 <code>npm run scripts</code> 的方式把它完全串起來來達到一鍵建立 docker image</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> cage.chung &lt;cage.chung@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /go/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"./counter"</span>]</span></span><br></pre></td></tr></table></figure><p>Dockerfile 檔案中我們需要指定 docker image 啟動時直接執行我們透過 <code>GOOS=linux GOARCH=amd64 go build -o counter</code> 編譯出來的執行檔 <code>counter*</code></p><p>執行自訂義 npm scripts <code>$ npm run docker</code> 成功執行後會自動建立 docker image</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list docker image</span></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY                                     TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">username/counter                               v0.1.0              1771ddbe0a98        4 seconds ago       14.67 MB</span><br></pre></td></tr></table></figure><p>執行 docker image</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run docker image</span></span><br><span class="line">$ docker run -d --name counter -p 3000:3000 username/counter:v0.1.0</span><br><span class="line">f8394fec624a4e3b989f7ce48857f64178e39aa8a5195f39e2d0d5a6572ee55c</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">$ dps</span><br><span class="line">CONTAINER ID        IMAGE                     COMMAND             CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">f8394fec624a        username/counter:v0.1.0   <span class="string">"./counter"</span>         2 seconds ago       Up 1 seconds        0.0.0.0:3000-&gt;3000/tcp   counter</span><br></pre></td></tr></table></figure><h2 id="repo"><a href="#repo" class="headerlink" title="repo"></a>repo</h2><p>Demo example <a href="https://github.com/cage1016/golang-serve-spa" target="_blank" rel="noopener">cage1016/golang-serve-spa</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clone repo</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:cage1016/golang-serve-spa.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm install package</span></span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一鍵建立 docker image</span></span><br><span class="line">$ npm docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker run</span></span><br><span class="line">$ docker run -d --name counter -p 3000:3000 username/counter:v0.1.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;golang-serve-SPA&quot;&gt;&lt;a href=&quot;#golang-serve-SPA&quot; class=&quot;headerlink&quot; title=&quot;golang serve SPA&quot;&gt;&lt;/a&gt;golang serve SPA&lt;/h2&gt;&lt;p&gt;最近有前端開發的需求，選用了 &lt;a href=&quot;https://github.com/davezuko/react-redux-starter-kit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-redux-starter-kit&lt;/a&gt; 來進行二次開發，省去一些想要使用 React, redux, redux-router 的基本配置，這樣速度會快一點&lt;/p&gt;
&lt;p&gt;因為 &lt;code&gt;react-redux-starter-kit&lt;/code&gt; 也使用 webpack 進行程式碼的打包, 所以最後的產出預設在 &lt;code&gt;dist&lt;/code&gt; 資料夾中，所以部署時只需要一個簡單的 host server 即可&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://kaichu.io/tags/golang/"/>
    
      <category term="webpack" scheme="http://kaichu.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>筆記 - django oscar i18n</title>
    <link href="http://kaichu.io/2016/04/14/django-oscar-i18n/"/>
    <id>http://kaichu.io/2016/04/14/django-oscar-i18n/</id>
    <published>2016-04-13T18:29:17.000Z</published>
    <updated>2016-08-03T13:09:30.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://github.com/django-oscar/django-oscar" target="_blank" rel="noopener">django-oscar</a> 是一個滿完整的開源的 EC 專案。Oscar 內建 i18n 是使用 <a href="https://www.transifex.com/codeinthehole/django-oscar/" target="_blank" rel="noopener">transifex</a>，依照 django-oscar 的說明，當 django-oscar 進行 master 的發佈時才會去更新相關的翻譯檔案，如果 i18n 的更新速度沒有辦法符合自己的需求有二種方式，1)加入 transifex 專案幫忙翻譯，只是 django-oscar 的更新速度比較慢 2)使用本地的檔案</p><a id="more"></a><p>目前 django-oscar 支援的 i18n</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">├── am_ET</span><br><span class="line">├── ar</span><br><span class="line">├── ar_SA</span><br><span class="line">├── bg_BG</span><br><span class="line">├── bn</span><br><span class="line">├── bn_BD</span><br><span class="line">├── ca</span><br><span class="line">├── cmn</span><br><span class="line">├── cs</span><br><span class="line">├── cs_CZ</span><br><span class="line">├── da</span><br><span class="line">├── de</span><br><span class="line">├── el_GR</span><br><span class="line">├── en</span><br><span class="line">├── en_US</span><br><span class="line">├── es</span><br><span class="line">├── es_AR</span><br><span class="line">├── es_CL</span><br><span class="line">├── et</span><br><span class="line">├── eu</span><br><span class="line">├── fa</span><br><span class="line">├── fa_IR</span><br><span class="line">├── <span class="keyword">fi</span></span><br><span class="line">├── fr</span><br><span class="line">├── he</span><br><span class="line">├── hi</span><br><span class="line">├── hi_IN</span><br><span class="line">├── id</span><br><span class="line">├── it</span><br><span class="line">├── ja</span><br><span class="line">├── ka_GE</span><br><span class="line">├── ko</span><br><span class="line">├── lt</span><br><span class="line">├── nb_NO</span><br><span class="line">├── nl</span><br><span class="line">├── pl</span><br><span class="line">├── pt_BR</span><br><span class="line">├── pt_PT</span><br><span class="line">├── ro_RO</span><br><span class="line">├── ru</span><br><span class="line">├── ru_RU</span><br><span class="line">├── sk</span><br><span class="line">├── sk_SK</span><br><span class="line">├── sv</span><br><span class="line">├── sv_SE</span><br><span class="line">├── th_TH</span><br><span class="line">├── tr</span><br><span class="line">├── tr_TR</span><br><span class="line">├── uk</span><br><span class="line">├── uk_UA</span><br><span class="line">├── vi</span><br><span class="line">├── zh</span><br><span class="line">├── zh-Hant</span><br><span class="line">├── zh_CN</span><br><span class="line">├── zh_HK</span><br><span class="line">├── zh_TW</span><br><span class="line">└── zh_TW.Big5</span><br></pre></td></tr></table></figure><p>django-oscar 使用 i18n 的設定，如果需要使用本地的 Locale 檔案，需要另外指定 <code>LOCALE_PATHS</code></p><p><strong>settings.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">########## GENERAL CONFIGURATION</span></span><br><span class="line"><span class="comment"># See: https://docs.djangoproject.com/en/dev/ref/settings/#time-zone</span></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Taipei'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See: https://docs.djangoproject.com/en/dev/ref/settings/#language-code</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">'en-us'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Includes all languages that have &gt;50% coverage in Transifex</span></span><br><span class="line"><span class="comment"># Taken from Django's default setting for LANGUAGES</span></span><br><span class="line">gettext_noop = <span class="keyword">lambda</span> s: s</span><br><span class="line">LANGUAGES = (</span><br><span class="line">  (<span class="string">'en-us'</span>, gettext_noop(<span class="string">'English (United States)'</span>)),</span><br><span class="line">  (<span class="string">'zh-cn'</span>, gettext_noop(<span class="string">'Simplified Chinese'</span>)),</span><br><span class="line">  (<span class="string">'zh-tw'</span>, gettext_noop(<span class="string">'Chinese (Taiwan)'</span>)),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Locale Path</span></span><br><span class="line">LOCALE_PATHS = (</span><br><span class="line">  normpath(join(DJANGO_ROOT, <span class="string">'locale'</span>)),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># See: https://docs.djangoproject.com/en/dev/ref/settings/#site-id</span></span><br><span class="line">SITE_ID = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See: https://docs.djangoproject.com/en/dev/ref/settings/#use-i18n</span></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See: https://docs.djangoproject.com/en/dev/ref/settings/#use-l10n</span></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See: https://docs.djangoproject.com/en/dev/ref/settings/#use-tz</span></span><br><span class="line">USE_TZ = <span class="literal">True</span></span><br><span class="line"><span class="comment">########## END GENERAL CONFIGURATION</span></span><br></pre></td></tr></table></figure><p>在建立自己的 django-oscar EC 商城時是使用 <code>pip install django-oscar</code> 來安裝，所以要重製所有 django-oscar 的翻譯 message 時就必需建立 <code>$PATH_TO_OSCAR</code> 的 symlink, 指定 symlink 之後執行 <code>python ./manage.py makemessages</code> 才會到 django-oscar env 的目錄把相關的 message 字串建立成 <code>*.go</code> 檔</p><h2 id="Simple-go-through"><a href="#Simple-go-through" class="headerlink" title="Simple go through"></a>Simple go through</h2><p>使用 <a href="https://github.com/cage1016/generator-django-oscar-app" target="_blank" rel="noopener">generator-django-oscar-app</a> 快速建立專案。依照連結的操作方式完成後(應該已經建立專案目錄，virtualenv)</p><p>切換至工作目錄</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env) <span class="built_in">cd</span> &#123;project_path&#125;/sandbox</span><br></pre></td></tr></table></figure><p>建立 <code>i18n</code> 及 <code>locale</code> 目錄</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env) mkdir i18n locale</span><br></pre></td></tr></table></figure><p>link virtualenv django-oscar source</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env) ln -s ~/.virtualenvs/&#123;your-ven-name&#125;/lib/python2.7/site-packages/oscar i18n/oscar</span><br></pre></td></tr></table></figure><p>使用 <code>makemessage</code> 建立 <code>zh_TW</code> locale 檔</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django-oscar locale: sandbox/i18n/oscar/locale</span></span><br><span class="line"><span class="comment"># project locale: sandbox/locale</span></span><br><span class="line">(env) python manage.py makemessages --symlinks --locale=zh_TW</span><br></pre></td></tr></table></figure><p>編譯 messages</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env) python manage.py compilemessages</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/django-oscar/django-oscar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;django-oscar&lt;/a&gt; 是一個滿完整的開源的 EC 專案。Oscar 內建 i18n 是使用 &lt;a href=&quot;https://www.transifex.com/codeinthehole/django-oscar/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;transifex&lt;/a&gt;，依照 django-oscar 的說明，當 django-oscar 進行 master 的發佈時才會去更新相關的翻譯檔案，如果 i18n 的更新速度沒有辦法符合自己的需求有二種方式，1)加入 transifex 專案幫忙翻譯，只是 django-oscar 的更新速度比較慢 2)使用本地的檔案&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://kaichu.io/tags/Python/"/>
    
      <category term="Oscar" scheme="http://kaichu.io/tags/Oscar/"/>
    
      <category term="virtualenv" scheme="http://kaichu.io/tags/virtualenv/"/>
    
      <category term="locale" scheme="http://kaichu.io/tags/locale/"/>
    
      <category term="i18n" scheme="http://kaichu.io/tags/i18n/"/>
    
  </entry>
  
</feed>
