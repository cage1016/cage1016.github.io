<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>postgres on KaiChu</title><link>https://kaichu.io/tags/postgres/</link><description>Recent content in postgres on KaiChu</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 24 Jan 2021 13:03:50 +0800</lastBuildDate><atom:link href="https://kaichu.io/tags/postgres/index.xml" rel="self" type="application/rss+xml"/><item><title>Rbac1 Design</title><link>https://kaichu.io/posts/rbac1-design/</link><pubDate>Sun, 24 Jan 2021 13:03:50 +0800</pubDate><guid>https://kaichu.io/posts/rbac1-design/</guid><description>&lt;p>權限系統在任何應用程式都是基礎且重要的部份，主要是對不同的人訪問資源進行權限的控制，本篇文章並沒有特別的再說明 Role-Based Access Control, 解釋的文章已經太多了，隨便 Google 都是一堆。最期在公司的專案也是有採用 RBAC 來管控系統的權限，一般的 RBAC0 (最基本的 User - Role - Permission) 的模型大至上可以符合需求，不過在權限配直的時候會有一點重工，所以選擇了有角色繼承的 RBAC1 來進行實作&lt;/p>
&lt;p>&lt;em>RBAC1&lt;/em>&lt;/p>
&lt;div class="fancybox">
&lt;a data-fancybox="gallery" href="https://kaichu.io/posts/rbac1-design/img/rbac1.jpeg" data-caption="">
&lt;img src="https://kaichu.io/posts/rbac1-design/img/rbac1.jpeg" />
&lt;/a>
&lt;/div>
&lt;p>&lt;em>Postgres Database Schema&lt;/em>
&lt;div class="fancybox">
&lt;a data-fancybox="gallery" href="https://kaichu.io/posts/rbac1-design/img/public.png" data-caption="">
&lt;img src="https://kaichu.io/posts/rbac1-design/img/public.png" />
&lt;/a>
&lt;/div>&lt;/p></description></item></channel></rss>