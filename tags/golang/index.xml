<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on KaiChu</title><link>https://kaichu.io/tags/golang/</link><description>Recent content in Golang on KaiChu</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 16 Mar 2020 02:00:55 +0000</lastBuildDate><atom:link href="https://kaichu.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Establishing a Websocket PUBSUB server with NATS and Google App Engine</title><link>https://kaichu.io/posts/gae-custom-ws/</link><pubDate>Mon, 16 Mar 2020 02:00:55 +0000</pubDate><guid>https://kaichu.io/posts/gae-custom-ws/</guid><description>在設計 API server 的時候會有遇到即時訊息傳遞的需求，同步可以用 GRPC 建立連線來溝通，為了降低系統的耦合性，可以選擇非同步的方式。而 PubSub 結合 websocket 是常用的方式。對於一位 Gopher 來說，NATS 是 CNCF 下面中關於訊息傳遞的開源專案且對</description></item><item><title>Skaffold debug goland</title><link>https://kaichu.io/posts/skaffold-debug-goland/</link><pubDate>Fri, 04 Oct 2019 01:03:16 +0000</pubDate><guid>https://kaichu.io/posts/skaffold-debug-goland/</guid><description>&lt;p>今年的 &lt;a href="https://inthecloud.withgoogle.com/summit-tpe-19/agenda.html">Google Cloud Summit 台北場&lt;/a> 於 9/24 在內湖萬豪酒店舉行，在主題演講中再次聽到 &lt;a href="https://cloud.google.com/code">Cloud Code&lt;/a> 的部份也看到比較有感覺的 Live demo&lt;/p>
&lt;blockquote>
&lt;p>Cloud Code 隨附的工具能協助您以輕鬆快速的方式編寫、部署及偵錯雲端原生的應用程式。這項產品提供 Visual Studio Code 和 IntelliJ 等 IDE 的擴充功能，方便您在 Kubernetes 上針對程式碼快速進行疊代、偵錯及部署等作業。
 
Cloud Code 是基於 &lt;a href="https://github.com/GoogleContainerTools/skaffold">GoogleContainerTools/skaffold: Easy and Repeatable Kubernetes Development&lt;/a> 為基礎上再整合 Visual Studio Code 和 IntelliJ IDE, 讓開發者可以直接在 IDE 上就可以快速開發 Kubernetes 上的應用程式&lt;/p>
&lt;/blockquote>
&lt;p>基本上來說 Cloud Code 給 Visual Studio Code 和 IntelliJ IDE 的 plugin 就是基於 skaffold 打造的(如下圖)，當你在 Visual Studio Code 執行(cmd+shift+p) &lt;code>Cloud Code: Continues Deploy&lt;/code> 的 log 就會知道&lt;/p>
&lt;div class="fancybox">
&lt;a data-fancybox="gallery" href="https://kaichu.io/images/posts/skaffold-go-debug-image-4.png" data-caption="">
&lt;img src="https://kaichu.io/images/posts/skaffold-go-debug-image-4.png" />
&lt;/a>
&lt;/div></description></item><item><title>Golang regEx parse Facebook Live rtmp</title><link>https://kaichu.io/posts/golang-regex/</link><pubDate>Tue, 21 Feb 2017 22:34:59 +0000</pubDate><guid>https://kaichu.io/posts/golang-regex/</guid><description>最近因為公司專案的關係，開始接觸 Facebook Live API，需要動態的透過 API 去建立一組 Live 直播 並將 rtmp 的整個字串拆解成 ServerUrl 及 StreamKey 二個部份再由 ffmpeg 拿到這個資訊去 streaming。因為 Youtube Data API v3 可以別分拿 StreamName 及 IngestionAddress, 所以只需要對 Facebook 的部份</description></item><item><title>GAE go Image API for GCS</title><link>https://kaichu.io/posts/gae-go-image-api/</link><pubDate>Mon, 31 Oct 2016 21:55:10 +0000</pubDate><guid>https://kaichu.io/posts/gae-go-image-api/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://go-gae-image-api-example-dot-gae-lab-001.appspot.com/">LIVE DEMO&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在開發 GAE 應用程式時，難免會遇到應用程式需要處理圖片的問題。GAE 的應用程用可以直接存取靜態的資源檔案，這塊直接在 &lt;code>app.yaml&lt;/code> 檔案中設定就可以了，不過也因為 GAE 應用程式的特性，需要將所有的資源上傳一份到 GAE 正式環境中，所以會發現上傳專案的容量大小會爆增(如果你將所有需要的圖檔階直接放在程式內)。&lt;/p>
&lt;p>專案檔案太大會影響 GAE 在自動擴展的效能，所以盡可能的將不必要的東西移多專案外(圖檔等)&lt;/p></description></item><item><title>解決 gvm install go1.4 安裝錯誤 [筆記]</title><link>https://kaichu.io/posts/gvm-install-go1-4/</link><pubDate>Wed, 21 Sep 2016 22:39:53 +0000</pubDate><guid>https://kaichu.io/posts/gvm-install-go1-4/</guid><description>本來是使用 brew 來管理 golang 的版本，brew 及 brew cask 某些程度是很方便，不過也越來越覺得彈性差了點。繼 node 使用 tj 大神的 tj/n: Node version management 之外，golang 也打算使用 moovweb/gvm: Go Version Manager 來管理版本，不過在照著官方步驟時報錯了，順手記錄了一</description></item><item><title>golang serving a single page application</title><link>https://kaichu.io/posts/golang-serve-static-site/</link><pubDate>Thu, 04 Aug 2016 10:22:03 +0000</pubDate><guid>https://kaichu.io/posts/golang-serve-static-site/</guid><description>golang serve SPA 最近有前端開發的需求，選用了 react-redux-starter-kit 來進行二次開發，省去一些想要使用 React, redux, redux-router 的基本配置，這樣速度會快一點 因為 react-redux-starter-kit 也使用 webpack 進行程式碼的打包, 所以最後的產出預設在 dist 資料夾中，所以部署時只需要一個簡單的 host server 即可</description></item><item><title>Managed VMs lab</title><link>https://kaichu.io/posts/managed-vms-lab/</link><pubDate>Wed, 30 Sep 2015 14:58:58 +0800</pubDate><guid>https://kaichu.io/posts/managed-vms-lab/</guid><description>&lt;p>&lt;strong>Presentation&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>slide: &lt;a href="https://goo.gl/SwuEvR">GAE Managed VM Introduction - Google Slides&lt;/a>&lt;/li>
&lt;li>source code: &lt;a href="https://github.com/cage1016/managed-vms-lab">cage1016/managed-vms-lab&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="gae-overview">GAE Overview&lt;/h2>
&lt;p>&lt;a href="https://cloud.google.com/appengine/docs">Google App Engine&lt;/a> 是 &lt;a href="https://cloud.google.com/">Google Cloud Platform&lt;/a> 中一個 PasS (Platform as a service) 的服務. 在 Pass 的 GAE 中，開發者只需要專注於 &lt;strong>Application&lt;/strong> 及 &lt;strong>Data&lt;/strong>，
其於的 &lt;strong>Runtime&lt;/strong>、&lt;strong>Middleware&lt;/strong>、&lt;strong>OS&lt;/strong>、&lt;strong>Virtualization&lt;/strong>、&lt;strong>Servers&lt;/strong>、&lt;strong>Storage&lt;/strong>、&lt;strong>Networking&lt;/strong> 則完全被 Google 控制管理。&lt;/p></description></item></channel></rss>