<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>pack - Tag - KaiChu</title><link>https://kaichu.io/tags/pack/</link><description>pack - Tag - KaiChu</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 17 Jun 2021 03:23:23 +0000</lastBuildDate><atom:link href="https://kaichu.io/tags/pack/" rel="self" type="application/rss+xml"/><item><title>Pack 0.19.0 Solved Invalid Cross Device Link at Google Cloud Build</title><link>https://kaichu.io/posts/pack-solved-invalid-cross-device-link-at-google-cloud-build/</link><pubDate>Thu, 17 Jun 2021 03:23:23 +0000</pubDate><author>Author</author><guid>https://kaichu.io/posts/pack-solved-invalid-cross-device-link-at-google-cloud-build/</guid><description>Pack 0.19.0 終於發佈了，這一個版本包含了解決在 Google Cloud Build 上執行 Pack 會遇到 Invalid Cross Device Link 的錯誤。這篇文章詳細說明了遇到的問題、回報 Issue 及解決的方式</description></item><item><title>Devcontainer Zx Pack</title><link>https://kaichu.io/posts/devcontainer-zx-pack/</link><pubDate>Mon, 24 May 2021 10:36:44 +0000</pubDate><author>Author</author><guid>https://kaichu.io/posts/devcontainer-zx-pack/</guid><description>vscode-dev-containers 透過 Container 有良好隔離性的特性來打造開發環境，官方已經提供了很多種開發環境可以直接使用，且這些 dev container 都可以自行修改 Dockerfile 及 devcontainer.json 來進行功能的擴充及參數配置。Google zx 可以讓我們使用 Javascript 來寫 Bash Script。用 devcontainer 來寫 xz scripts 最後用 Pack 建構成 Container image 交付給其他人使用</description></item><item><title>Build Kuberntes GRPC Health Probe with Pack</title><link>https://kaichu.io/posts/build-kubernetes-grpc-health-probe-with-pack/</link><pubDate>Thu, 13 May 2021 06:37:40 +0000</pubDate><author>Author</author><guid>https://kaichu.io/posts/build-kubernetes-grpc-health-probe-with-pack/</guid><description>在 Kubernetes Pod 的生命周期中我們可以使用 `livenessProbe` 及 `readinessProbe` 探針來檢查服務健康，本篇文章簡單介紹了如何為 GRPC Service / Client 對應 `grpc_health_probe` 的配置設定及服務健康的檢查，最後使用 buildpack 建構所需 container image 含動態下載 Github `grpc_health_probe` Assets</description></item><item><title>Github Assets Cnb</title><link>https://kaichu.io/posts/github-assets-cnb/</link><pubDate>Tue, 20 Apr 2021 21:54:06 +0800</pubDate><author>Author</author><guid>https://kaichu.io/posts/github-assets-cnb/</guid><description>在構建 container image 時，有時候會有需求動態下載 Github repo 中的 Assets 檔案，簡單的方式就是在 `dockerfile` 透過 `curl` 指令來獲取檔案，本篇文章則透過 paketo-buildpacks/packit 來實作一個可以下載 Github Assets 的 buildpack cage1016/github-assets-cnb</description></item><item><title>ghcr.io Pack Build</title><link>https://kaichu.io/posts/ghcr-io-pack-build/</link><pubDate>Wed, 14 Apr 2021 16:23:24 +0800</pubDate><author>Author</author><guid>https://kaichu.io/posts/ghcr-io-pack-build/</guid><description>Github 提供了開源的專案免費的 registry，所以寫個文章來記錄一下，如果使用 .github/workflows/build.yml 中使用 pack 來構建 container image Reference Packages: Container registry now supports GITHUB_TOKEN - GitHub Changelog</description></item><item><title>Build Your Buildpack</title><link>https://kaichu.io/posts/build-your-buildpack/</link><pubDate>Thu, 08 Apr 2021 13:58:19 +0800</pubDate><author>Author</author><guid>https://kaichu.io/posts/build-your-buildpack/</guid><description>在 Buildpack Tips and Tricks 上一篤文章中我們提到了 Cloud Native Buildpacks 專案發起的目的還有一些使用上的心得，一般的使用情境就是選擇適合的 builder (Google, Heroku, Paketo)，必要時可以指定額外的 buildpack 。本篇文章稍後也會介紹 buildpack 基本組成元件、如何編寫自己的 buildpack 及發佈至 buildpack registry</description></item><item><title>Buildpack Tips and Tricks</title><link>https://kaichu.io/posts/buildpack-tips-and-tricks/</link><pubDate>Fri, 02 Apr 2021 23:06:07 +0800</pubDate><author>Author</author><guid>https://kaichu.io/posts/buildpack-tips-and-tricks/</guid><description>CNCF 下的 buildpack 是定義出轉換程式碼至 image 的標準，使用者可以適擇適合的 builder (Google, HeroKu, Paketo) 來產出 container image，除了免去編輯 Dockerfile 的部份、container image layer 有相同的體驗、container image 的安全性交由 builder 來處理等等好處。不過美好的事情背後也是有一些取捨。本篇文章就是最近優化 CI/CD pipeline 流程上使用 buildpack 的心得分享還有遇到的坑及解決方案</description></item></channel></rss>