<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes on KaiChu</title><link>https://kaichu.io/tags/kubernetes/</link><description>Recent content in kubernetes on KaiChu</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 13 May 2021 06:37:40 +0000</lastBuildDate><atom:link href="https://kaichu.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Build Kuberntes GRPC Health Probe with Pack</title><link>https://kaichu.io/posts/build-kubernetes-grpc-health-probe-with-pack/</link><pubDate>Thu, 13 May 2021 06:37:40 +0000</pubDate><guid>https://kaichu.io/posts/build-kubernetes-grpc-health-probe-with-pack/</guid><description>&lt;p>Kuberntes Pod 生命周期
&lt;div class="fancybox">
&lt;a data-fancybox="gallery" href="https://kaichu.io/posts/build-kubernetes-grpc-health-probe-with-pack/img/pod-loap.jpeg" data-caption="">
&lt;img src="https://kaichu.io/posts/build-kubernetes-grpc-health-probe-with-pack/img/pod-loap.jpeg" />
&lt;/a>
&lt;/div>
(ref: &lt;a href="https://www.qikqiak.com/k8strain/k8s-basic/pod-life/">https://www.qikqiak.com/k8strain/k8s-basic/pod-life/&lt;/a>)&lt;/p>
&lt;p>在 Kubernetes Pod 完整的生命周期包含了三個部份: &lt;code>Iinit container&lt;/code> &lt;code>Pod Hook&lt;/code> &lt;code>健康檢查&lt;/code>。這三部都會影響到 Pod 的生命周期，而本篇文章說明如何使用 pack 打包 &lt;a href="https://github.com/grpc-ecosystem/grpc-health-probe/">grpc-health-probe&lt;/a> 來支援 GRPC 健康檢查&lt;/p></description></item><item><title>Telepresence 2 Have a Tried</title><link>https://kaichu.io/posts/telepresence-2-have-a-tried/</link><pubDate>Tue, 04 May 2021 02:11:40 +0000</pubDate><guid>https://kaichu.io/posts/telepresence-2-have-a-tried/</guid><description>&lt;p>在開發 Kuberentes 應用程式時使用 &lt;a href="https://github.com/GoogleContainerTools/skaffold">Skaffold&lt;/a> 應該是基本操作了，Skaffold 可以幫忙加速開發的速度 (修改程式碼 → 構建 container image → push container image to registry (optional) → 部署至 Kubernets Cluster)，至於是否搭配 &lt;code>Helm&lt;/code> 還是直接操作 &lt;code>yaml&lt;/code> 就看個人喜好來決定&lt;/p>
&lt;p>在 Debug 部份，Skaffold 也支援 Remote container debug 的功能 (之前的文章請參照 &lt;a href="https://kaichu.io/posts/skaffold-debug-goland/">Skaffold debug goland&lt;/a>)。雖然 Skaffold debug 很方便，不過當 Kubernetes 的應用一多時就沒有辦法在本機端完整的重現有所的服務，這時候開源的 Telepresence 就是一個很好的幫手&lt;/p>
&lt;h3 id="telepresence">Telepresence&lt;/h3>
&lt;div class="fancybox">
&lt;a data-fancybox="gallery" href="https://kaichu.io/posts/telepresence-2-have-a-tried/img/bird-on-bricks.svg" data-caption="">
&lt;img src="https://kaichu.io/posts/telepresence-2-have-a-tried/img/bird-on-bricks.svg" />
&lt;/a>
&lt;/div></description></item><item><title>GoPherCon 2020 TW: 如何透過 Go-kit 快速搭建微服務架構應用程式實戰</title><link>https://kaichu.io/posts/gokit-engineering-operation/</link><pubDate>Mon, 16 Nov 2020 10:50:48 +0800</pubDate><guid>https://kaichu.io/posts/gokit-engineering-operation/</guid><description>&lt;blockquote>
&lt;p>Golang 也因為開源、程式語法的簡潔開始受到程式開發人員的喜好。也因些在搭建微服務架構應用程式的時候有很多選擇，在 Web 框架中就有 Gin, Echo, Beego 等等，每一個 Web 框架都有其不同的特性，而 Go-Kit 是一個微服務開發的工具鏈，本場次將基於 Kuberentes/Istio 透過 Go-kit 搭建微服務架構應用程式實戰中的工程項目進行說明&lt;/p>
&lt;/blockquote>
&lt;p>在第一屆的 GopherCon TW 中分享 &lt;strong>如何透過 Go-kit 快速搭建微服務架構應用程式實戰&lt;/strong>&lt;/p></description></item><item><title>Gokit microservice demo</title><link>https://kaichu.io/posts/gokit-ms-demo/</link><pubDate>Tue, 03 Nov 2020 17:50:10 +0000</pubDate><guid>https://kaichu.io/posts/gokit-ms-demo/</guid><description>&lt;p>小弟在 GDG Devfest 2019 分享過 &lt;a href="https://www.slideshare.net/cagechung/gdg-devfest-2019-build-go-kit-microservices-at-kubernetes-with-ease">Build go kit microservices at kubernetes with ease&lt;/a>，Gokit 是一個建立 microservice 的 toolkit，Gokit 提出 &lt;code>Transport&lt;/code> &lt;code>Endpoint&lt;/code> &lt;code>Service&lt;/code> 三種概念來幫助開始者進行架構分離，對單一微服務進行架構強制分離或許會增加程式碼的閱讀性，不過對一定規模的微服務來說，一致性的程式架構分離反而會增加多人開發的效率&lt;/p>
&lt;h2 id="cage1016ms-demo">cage1016/ms-demo&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Service&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>add&lt;/td>
&lt;td>Expose Sum method&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tictac&lt;/td>
&lt;td>Expose Tic/Tac method&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;a href="https://github.com/cage1016/ms-demo">cage1016/ms-demo: gokit microservice demo&lt;/a> 提供了使用 gokit 建立的 kubernetes/istio 的 manifest, 可以讓使用者快速的練習基於 kubernetes/istio 來搭建 gokit 微服務&lt;/p></description></item><item><title>Skaffold debug goland</title><link>https://kaichu.io/posts/skaffold-debug-goland/</link><pubDate>Fri, 04 Oct 2019 01:03:16 +0000</pubDate><guid>https://kaichu.io/posts/skaffold-debug-goland/</guid><description>&lt;p>今年的 &lt;a href="https://inthecloud.withgoogle.com/summit-tpe-19/agenda.html">Google Cloud Summit 台北場&lt;/a> 於 9/24 在內湖萬豪酒店舉行，在主題演講中再次聽到 &lt;a href="https://cloud.google.com/code">Cloud Code&lt;/a> 的部份也看到比較有感覺的 Live demo&lt;/p>
&lt;blockquote>
&lt;p>Cloud Code 隨附的工具能協助您以輕鬆快速的方式編寫、部署及偵錯雲端原生的應用程式。這項產品提供 Visual Studio Code 和 IntelliJ 等 IDE 的擴充功能，方便您在 Kubernetes 上針對程式碼快速進行疊代、偵錯及部署等作業。
 
Cloud Code 是基於 &lt;a href="https://github.com/GoogleContainerTools/skaffold">GoogleContainerTools/skaffold: Easy and Repeatable Kubernetes Development&lt;/a> 為基礎上再整合 Visual Studio Code 和 IntelliJ IDE, 讓開發者可以直接在 IDE 上就可以快速開發 Kubernetes 上的應用程式&lt;/p>
&lt;/blockquote>
&lt;p>基本上來說 Cloud Code 給 Visual Studio Code 和 IntelliJ IDE 的 plugin 就是基於 skaffold 打造的(如下圖)，當你在 Visual Studio Code 執行(cmd+shift+p) &lt;code>Cloud Code: Continues Deploy&lt;/code> 的 log 就會知道&lt;/p>
&lt;div class="fancybox">
&lt;a data-fancybox="gallery" href="https://kaichu.io/posts/skaffold-debug-goland/skaffold-go-debug-image-4.png" data-caption="">
&lt;img src="https://kaichu.io/posts/skaffold-debug-goland/skaffold-go-debug-image-4.png" />
&lt;/a>
&lt;/div></description></item></channel></rss>