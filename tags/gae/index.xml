<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GAE on KaiChu</title><link>https://kaichu.io/tags/gae/</link><description>Recent content in GAE on KaiChu</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 16 Mar 2020 02:00:55 +0000</lastBuildDate><atom:link href="https://kaichu.io/tags/gae/index.xml" rel="self" type="application/rss+xml"/><item><title>Establishing a Websocket PUBSUB server with NATS and Google App Engine</title><link>https://kaichu.io/posts/gae-custom-ws/</link><pubDate>Mon, 16 Mar 2020 02:00:55 +0000</pubDate><guid>https://kaichu.io/posts/gae-custom-ws/</guid><description>在設計 API server 的時候會有遇到即時訊息傳遞的需求，同步可以用 GRPC 建立連線來溝通，為了降低系統的耦合性，可以選擇非同步的方式。而 PubSub 結合 websocket 是常用的方式。對於一位 Gopher 來說，NATS 是 CNCF 下面中關於訊息傳遞的開源專案且對</description></item><item><title>Screenshot as a Service</title><link>https://kaichu.io/posts/screenshot-as-a-service/</link><pubDate>Sat, 09 Sep 2017 00:23:00 +0000</pubDate><guid>https://kaichu.io/posts/screenshot-as-a-service/</guid><description>&lt;p>&lt;a href="https://gcpugtw.kktix.cc/events/meetup201709">GCPUG Taiwan Meetup #29&lt;/a> Screenshot as a service&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/cage1016/screenshot-as-a-service-demo">cage1016/screenshot-as-a-service-demo: GCPUG Taiwan Meetup #29: screenshot as a service demo code&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;iframe style="width: 100%; height: 500px;" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"
src="http://www.slideshare.net/slideshow/embed_code/79563683?rel=0" allowfullscreen webkitallowfullscreen
mozallowfullscreen> &lt;/iframe>
&lt;br>&lt;br></description></item><item><title>weddingcnp via GCP - 3. endpointAPI 設計實作</title><link>https://kaichu.io/posts/weddingcnp-via-gcp-3/</link><pubDate>Wed, 12 Jul 2017 22:51:05 +0000</pubDate><guid>https://kaichu.io/posts/weddingcnp-via-gcp-3/</guid><description>此篇就對 Cage &amp;amp; Ping wedding 中實作專案中最為重要的 backend API (endpoint API) 部份進行簡單的說明，每一個 Google App Engine Service 實作的細節會在後序的篇幅中介紹 weddingcnp 系例傳送門 weddingcnp via GCP 簡介 weddingcnp via GCP - 1. 專案架構切分 weddingcnp via GCP - 2. 前端頁面設計實作 weddingcnp via GCP - 3. endpointAPI 設計實作</description></item><item><title>weddingcnp via GCP - 2. 前端頁面設計實作</title><link>https://kaichu.io/posts/weddingcnp-via-gcp-2/</link><pubDate>Sun, 18 Jun 2017 21:02:54 +0000</pubDate><guid>https://kaichu.io/posts/weddingcnp-via-gcp-2/</guid><description>此篇就對 Cage &amp;amp; Ping wedding frontend Service 使用了 GAE standard runtime 搭配 echo 網頁框架實作介紹 weddingcnp 系例傳送門 weddingcnp via GCP 簡介 weddingcnp via GCP - 1. 專案架構切分 weddingcnp via GCP - 2. 前端頁面設計實作 weddingcnp via GCP - 3. endpointAPI 設計實作 weddingcnp 前端 vue.js 設計實作 weddingcnp edm 寄送 sendgrid weddingcnp 前端頁面設計實作 Cage &amp;amp; Ping wedding frontend Service(Module)</description></item><item><title>weddingcnp via GCP - 1. 專案架構切分</title><link>https://kaichu.io/posts/weddingcnp-via-gcp-1/</link><pubDate>Mon, 12 Jun 2017 22:14:22 +0000</pubDate><guid>https://kaichu.io/posts/weddingcnp-via-gcp-1/</guid><description>此篇就對 Cage &amp;amp; Ping wedding 中實作的專案架構進行簡單的說明，每一個 Google App Engine Service 實作的細節會在後序的篇幅中介紹 weddingcnp 系例傳送門 weddingcnp via GCP 簡介 weddingcnp via GCP - 1. 專案架構切分 weddingcnp via GCP - 2. 前端頁面設計實作 weddingcnp via GCP - 3. endpointAPI 設計實作 weddingcnp 前端 vue.js 設計實作 weddingcnp</description></item><item><title>weddingcnp via GCP</title><link>https://kaichu.io/posts/weddingcnp-via-gcp/</link><pubDate>Thu, 08 Jun 2017 11:11:00 +0000</pubDate><guid>https://kaichu.io/posts/weddingcnp-via-gcp/</guid><description>Cage &amp;amp; Ping wedding 是一個我們為結婚喜宴處理朋友出席報名相關事宜特別開發的網站，所有的服務全部建構在 Google Cloud Platform 上 功能大至如下: 喜宴相關資訊 訂婚場/結婚場時間、地點、交通資訊 出席人數統計(強制使用 Google/Facebook 登入)。訂婚場/結婚</description></item><item><title>GAE go Image API for GCS</title><link>https://kaichu.io/posts/gae-go-image-api/</link><pubDate>Mon, 31 Oct 2016 21:55:10 +0000</pubDate><guid>https://kaichu.io/posts/gae-go-image-api/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://go-gae-image-api-example-dot-gae-lab-001.appspot.com/">LIVE DEMO&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在開發 GAE 應用程式時，難免會遇到應用程式需要處理圖片的問題。GAE 的應用程用可以直接存取靜態的資源檔案，這塊直接在 &lt;code>app.yaml&lt;/code> 檔案中設定就可以了，不過也因為 GAE 應用程式的特性，需要將所有的資源上傳一份到 GAE 正式環境中，所以會發現上傳專案的容量大小會爆增(如果你將所有需要的圖檔階直接放在程式內)。&lt;/p>
&lt;p>專案檔案太大會影響 GAE 在自動擴展的效能，所以盡可能的將不必要的東西移多專案外(圖檔等)&lt;/p></description></item><item><title>gae link pip helper</title><link>https://kaichu.io/posts/gae-link-pip-helper/</link><pubDate>Mon, 28 Mar 2016 10:23:59 +0800</pubDate><guid>https://kaichu.io/posts/gae-link-pip-helper/</guid><description>&lt;p>Python 的社群非常活躍有非常多好用的套件可以使用，也有 &lt;code>pip&lt;/code> 的套件管理程式來讓開發者管理套件升級、版控等問題&lt;/p></description></item><item><title>gae appcfg update 403</title><link>https://kaichu.io/posts/gae-appcfg-update-403/</link><pubDate>Thu, 10 Mar 2016 10:41:40 +0800</pubDate><guid>https://kaichu.io/posts/gae-appcfg-update-403/</guid><description>&lt;p>當 GAE application 本地開發到一個階段時，就會開始想要上傳至 appengine.google.com 進行線上的測試，這時候便會使 command line 工
具來上傳專案&lt;/p></description></item><item><title>Managed VMs lab</title><link>https://kaichu.io/posts/managed-vms-lab/</link><pubDate>Wed, 30 Sep 2015 14:58:58 +0800</pubDate><guid>https://kaichu.io/posts/managed-vms-lab/</guid><description>&lt;p>&lt;strong>Presentation&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>slide: &lt;a href="https://goo.gl/SwuEvR">GAE Managed VM Introduction - Google Slides&lt;/a>&lt;/li>
&lt;li>source code: &lt;a href="https://github.com/cage1016/managed-vms-lab">cage1016/managed-vms-lab&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="gae-overview">GAE Overview&lt;/h2>
&lt;p>&lt;a href="https://cloud.google.com/appengine/docs">Google App Engine&lt;/a> 是 &lt;a href="https://cloud.google.com/">Google Cloud Platform&lt;/a> 中一個 PasS (Platform as a service) 的服務. 在 Pass 的 GAE 中，開發者只需要專注於 &lt;strong>Application&lt;/strong> 及 &lt;strong>Data&lt;/strong>，
其於的 &lt;strong>Runtime&lt;/strong>、&lt;strong>Middleware&lt;/strong>、&lt;strong>OS&lt;/strong>、&lt;strong>Virtualization&lt;/strong>、&lt;strong>Servers&lt;/strong>、&lt;strong>Storage&lt;/strong>、&lt;strong>Networking&lt;/strong> 則完全被 Google 控制管理。&lt;/p></description></item><item><title>GCSIterator (Python CSV iterator for Google Cloud Storage) via GAE</title><link>https://kaichu.io/posts/gcsiterator/</link><pubDate>Tue, 28 Jul 2015 12:03:48 +0800</pubDate><guid>https://kaichu.io/posts/gcsiterator/</guid><description>&lt;p>最近的專案常常需要在 &lt;a href="https://cloud.google.com/appengine/docs/python/">GAE - Python&lt;/a> 跟大 CSV (40MB)檔打交道。在 Python 中利用 &lt;code>csv.reader&lt;/code> &amp;amp; &lt;code>csv.DictReader&lt;/code>
可以很容易的處理 &lt;code>csv&lt;/code> 讀取的動作。但是在 GAE 平台上一般 Request 時間只有 &lt;strong>60s&lt;/strong>，而 Tasks Request 則有 &lt;strong>10mins&lt;/strong> 的限制[3]，而在 GAE 上處理超大檔案的時候除了會遇到
&lt;code>DeadlineExceededErrors&lt;/code> 的雷也會踩到 &lt;code>Exceeded soft private memory limit&lt;/code> 的問題(預設 instance 的記憶體只有 &lt;strong>128MB&lt;/strong>，在處理大 CSV 檔很容易踩到的雷)&lt;/p>
&lt;p>所以在處理大 CSV 檔最好不要一次就把所有的資料讀到記憶體中，而 GAE 上又有檔案存取的限制，所以大部份會搭配 &lt;a href="https://cloud.google.com/storage/">GCS&lt;/a> 一起使用，
把檔案放在 GCS 上，由 GAE 透過 &lt;code>google-api-python-client&lt;/code> 到 GCS 進行檔案的存取&lt;/p>
&lt;p>&lt;code>google-api-python-client&lt;/code> 中實作了 GCS JSON API 的 chunks 下載(&lt;strong>MediaIoBaseDownload&lt;/strong> [4])，在 chunks 下載時就必需另外處理斷行的問題(實作 Python csv.DictReader iterator 內解決斷行問題)&lt;/p></description></item><item><title>GAE-todomvc</title><link>https://kaichu.io/posts/gae-todomvc/</link><pubDate>Mon, 27 Jul 2015 15:24:58 +0800</pubDate><guid>https://kaichu.io/posts/gae-todomvc/</guid><description>&lt;p>最近需要幫內部基於&lt;a href="https://cloud.google.com/appengine/docs/python/">GAE - Python&lt;/a>平台上導入前端的框架，&lt;a href="http://todomvc.com/">TodoMVC&lt;/a>
是一個非常適合拿來學習前端框架的資源，它以&lt;strong>TodoMVC&lt;/strong>的題目實作目前主流的前端框架(&lt;strong>React&lt;/strong>、&lt;strong>Angular&lt;/strong>、&lt;strong>Vuejs&lt;/strong>、&lt;strong>Ember.js&lt;/strong>、&lt;strong>Polymer&lt;/strong> 等等)，
你可以看到不同框架的優缺點，選擇一個最適合你的框架來學習。&lt;/p>
&lt;p>在 &lt;a href="https://github.com/cage1016/gae-todomvc">cage1016/gae-todomvc&lt;/a> 中則選用了 &lt;code>Reactjs (Flux)&lt;/code>、&lt;code>AnguarJs&lt;/code>、&lt;code>Vue.js&lt;/code> 三個前端框架來搭配 GAE-Python + Datastore + Endpoints APIs。&lt;/p></description></item><item><title>Google Announce Application Default Credentials (ADC)</title><link>https://kaichu.io/posts/adc/</link><pubDate>Tue, 21 Jul 2015 10:04:40 +0800</pubDate><guid>https://kaichu.io/posts/adc/</guid><description>&lt;p>今天 Google 公佈了 &lt;a href="http://googlecloudplatform.blogspot.tw/2015/07/Easier-Auth-for-Google-Cloud-APIs-Introducing-the-Application-Default-Credentials-feature.html">Application Default Credentials (ADC)&lt;/a>，一個可以讓使用者更方便在 GCP 上去界接其他的需要使用 OAuth 存取的服務如 &lt;a href="https://cloud-dot-devsite.googleplex.com/storage">Google Cloud Storage&lt;/a>、&lt;a href="https://cloud-dot-devsite.googleplex.com/bigquery">Google BigQuery&lt;/a>。這對常常寫 GAE 的我來說又更方便了。&lt;/p>
&lt;p>在 GCP 專案建立之後，預設會自動產生 &lt;a href="https://developers.google.com/accounts/docs/OAuth2ServiceAccount">Service Accounts&lt;/a>，
這些內建的 Service Accounts 在進行 Server to Server 的存取時只需要應用程式本身的認証，直接使用 &lt;code>AppAssertionCredentials&lt;/code> 可以不需透過 &lt;code>Flow&lt;/code> 來建立 &lt;code>Credentials&lt;/code>物件&lt;/p></description></item></channel></rss>